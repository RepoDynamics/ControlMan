$schema: https://json-schema.org/draft/2020-12/schema
title: Base Configurations
description: |
  Configurations for the project's control center.
examples:
  - cache:
      retention_days:
        api: 1
        extensions: 1

type: object
additionalProperties: false
required: [ cache ]
properties:
  cache:
    title: Cache Configurations
    description: |
      Settings for various cached data.
      
      :::{admonition} Local Override
      :class: tip dropdown

      When working with a local clone of the repository on your computer,
      you can override these configurations 
      by creating a `.local_cc_config.yaml` file with the same syntax
      in the root of the repository.
      Since the files under the local directory 
      are automatically added to the `.gitignore` file,
      this file will not be tracked by Git, 
      and thus will not be pushed to the remote repository.
      This allows you to easily maintain your own local configurations 
      without affecting the remote repository.
      :::
    type: object
    additionalProperties: false
    required: [ retention_days ]
    properties:
      retention_days:
        title: Retention Time
        description: |
          Number of days to keep various cached data.
        type: object
        additionalProperties: false
        required: [ api, extensions ]
        properties:
          api:
            title: API Data
            description: |
              Number of days to keep the cached data retrieved from various web APIs,
              such as GitHub repo/users data, software versions, publications etc.
            type: integer
            minimum: 0
          extensions:
            title: Extension Files
            description: |
              Number of days to keep the cached extension files (defined in `extensions.yaml`)
              retrieved from other GitHub repositories.
            type: integer
            minimum: 0
  extensions:
    title: Extension Definitions
    description: |
      An array of extension definitions for files in the repository's control center,
      ordered by priority (highest first).
    type: array
    uniqueItems: true
    items:
      title: Extension Definition
      description: An extension for a specific file in the control center.
      type: object
      additionalProperties: false
      required: [ type, repo, path, append_list, append_dict, raise_duplicate ]
      properties:
        type:
          title: Type
          description: |
            The file in the control center to extend, defined by its relative path
            from the root of the control center, excluding the file extension.
            As an exception, tool configuration files under `package_python/tools` are
            all defined by the same extension, `package_python/tools`.
          type: string
          enum:
            - project/credits
            - project/intro
            - project/license
            - dev/branch
            - dev/changelog
            - dev/commit
            - dev/discussion
            - dev/issue
            - dev/label
            - dev/maintainer
            - dev/pull
            - dev/repo
            - dev/tag
            - dev/workflow
            - package_python/build
            - package_python/build_tests
            - package_python/conda
            - package_python/dev_config
            - package_python/docs
            - package_python/entry_points
            - package_python/metadata
            - package_python/requirements
            - package_python/tools
            - ui/health_files
            - ui/readme
            - ui/theme
            - ui/web
        repo:
          title: Repository
          description: |
            The fullname of the target GitHub repository to retrieve the extension file from.
            The fullname has the form `OWNER-USERNAME/REPOSITORY-NAME`,
            e.g., `RepoDynamics/PyPackIT`.
          type: string
          pattern: ^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$
        ref:
          title: Reference
          description: |
            A Git reference (e.g., branch, tag, or commit hash) in the target repository
            to retrieve the extension file from.
            If not specified, the latest commit on the default branch
            of the target repository is used as the reference.
          type: string
        path:
          title: Path
          description: >-
            The path to the extension file in the target repository,
            relative to the root of the repository.
          type: string
        append_list:
          title: Append Lists
          description: >-
            Whether to append the elements of the arrays (aka lists)
            present in the extended content to the corresponding existing arrays
            present in higher-priority content.
            If set to false, any array that has a corresponding existing array
            in higher-priority content will be treated as a duplicate
            (see raise_duplicate below).
          type: boolean
        append_dict:
          title: Append Dictionaries
          description: >-
            Whether to append the key-value pairs of the objects (aka dictionaries)
            present in the extended content to the corresponding existing objects
            present in higher-priority content.
            If set to false, any object that has a corresponding existing object
            in higher-priority content will be treated as a duplicate
            (see raise_duplicate below).
          type: boolean
        raise_duplicate:
          title: Raise Duplicates
          description: >-
            Whether to raise an error if any element (i.e., object, array, string, etc.)
            in the extended content is already set in a higher-priority content.
            If set to false, the duplicates will be simply ignored.
          type: boolean
