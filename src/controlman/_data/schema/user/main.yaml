$schema: https://json-schema.org/draft/2020-12/schema
title: Project
description: |
  Main project metadata and settings, including
  name, descriptors, copyright, license, citation,
  funding, team, theme, documentation, and contact information.
examples:
  - tagline: Placeholder Project Tagline
    description: |
      Replace this text with a short summary of ${{ name }},
      describing its purpose and main features.
      By default, this text is displayed on the repository's main README file,
      on the homepage of the project's website,
      on the project's PyPI and TestPyPI pages,
      and on the package's main docstring.
      Like all other entries in the repository's control center,
      this text can also contain dynamic references to other entries,
      using the `${{ path.to.value }}` syntax.
      By default, the first occurrence of the name of the project
      in this text is styled as bold/italic and linked to the project's website.
      The text can also contain (GitHub Flavored) HTML syntax,
      such as `<b>` for <b>bold text</b>, `<i>` for <i>italic text</i>,
      `<u>` for <u>underlined text</u>, and `<a>`
      for <a href="https://pypackit.repodynamics.com">hyperlinks</a>.
    keywords:
      - First Keyword
      - Second Keyword
      - Third Keyword
    keynotes:
      - title: First Key Feature
        description: |
          Description of the first key feature of ${{ name }}.
          By default, these keynotes are displayed on the repository's main README file,
          on the homepage of the project's website, and on the project's PyPI and TestPyPI pages.
      - title: Second Key Feature
        description: |
          Description of the second key feature of ${{ name }}.
          For aesthetic reasons, it is recommended to keep the descriptions of all keynotes
          approximately the same length.
      - title: Third Key Feature
        description: |
          Description of the third key feature of ${{ name }}.
          You can add as many keynotes as you want.
          However, in order to keep the READMEs clean and tidy,
          it is recommended to keep the number of keynotes between 3 and 7.
    license:
      id: gnu_agpl_v3+
    authors:
      info:
        - username: ${{ owner.username }}
    copyright:
      notice: ${{ copyright.period }} ${{ copyright.name }}
    contact:
      email:
        main: "${{ owner.email }}"
        security: "${{ owner.email }}"
        code_of_conduct: "${{ owner.email }}"
        support: "${{ owner.email }}"
    maintainers:
      pull:
        reviewer:
          by_path:
            # Default owners for everything, unless a later match takes precedence.
            - "*": [ "${{ owner.username }}" ]
            # All files directly under the root directory; these are config files like pyproject.toml.
            - "/*": [ "${{ owner.username }}" ]
            # All files and directories under the '.github' directory.
            # These are workflows (sensitive; can be exploited) and other GitHub related configs.
            - "/.github/": [ "${{ owner.username }}" ]
      issue:
        app_bug_gui: [ "${{ owner.username }}" ]
        app_bug_cli: [ "${{ owner.username }}" ]
        app_bug_api: [ "${{ owner.username }}" ]
        app_bug_setup: [ "${{ owner.username }}" ]
        app_request_enhancement: [ "${{ owner.username }}" ]
        app_request_feature: [ "${{ owner.username }}" ]
        app_request_breaking: [ "${{ owner.username }}" ]
      discussion:
        announcements: [ "${{ owner.username }}" ]
    citation:
      message: >-
        If you use this software, please cite it using the metadata from this file.
      title: ${{ name }}
    web:
      announcement:
        path: ${{ path.dir.website }}/announcement.html
      path:
        license: about/license
        contact: help/contact
        blog: news
    readme:
      github: &readme-config
        type: pypackit-default
        config:
          header:
            menu_bottom:
              buttons:
                - title: Overview
                  description: ""
                  path: 'intro/overview'
                - title: Install
                  description: ""
                  path: 'manual/install'
                - title: Releases
                  description: ""
                  path: 'news/category/releases'
                - title: Contact
                  description: ""
                  path: 'help/contact'
      pypi: *readme-config
      conda: *readme-config
      pypi:
        path: ${{ path.dir.source }}/README_PYPI.md

type: object
additionalProperties: false
required: [ url ]
properties:
  name:
    title: Name
    description: |
      Name of the project.
      
      This is dynamically referenced in various documents,
      such as documentation website, README files, and community health files.
      It is also used to derive the package name when it is not specified explicitly.
      
      The project name on itself has no restrictions and can be any valid unicode string.
      However, by default, it is also used to derive the 
      distribution name (cf. [`pkg.name`](##cc.pkg.name))
      and import name (cf. [`pkg.import_name`](##cc.pkg.import_name)) of the package,
      which have stricter naming specifications.
      While you can separately set these,
      for consistency, it is **recommended** to choose a project name
      that can be used to automatically derive the distribution and import name of the package.
      This helps to avoid confusion and makes it easier for others to find, install, and use your package.
    auto: |
      If the project name is not provided, it is automatically derived from the GitHub repository name,
      simply by replacing all hyphens with spaces.
    type: string
  title:
    title: Title
    description: |
      A single-line description or slogan of the project.
      
      This is automatically displayed on the About section of the project's GitHub repository 
      (cf. [`repo.config.description`](##cc.repo.config.description)),
      and the project's PyPI and TestPyPI pages
      (by being added to package metadata, i.e.,
      the [`project.description`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#description)
      key of the `pyproject.toml` file).
    type: string
    pattern: ^[^\n\r]*$
  abstract:
    title: Abstract
    description: |
      A short description of the project.
      
      This is automatically displayed on the repository's main README file
      (cf. [`doc.github`](##cc.doc.github)),
      on the homepage of the project's website,
      on the project's PyPI and TestPyPI pages
      (cf. [`doc.pypi`](##cc.doc.pypi)),
      and on the package's main docstring
      (cf. [`pkg.docs.init`](##cc.pkg.docs.init)).
      
      By default, the first occurrence of the project's name
      is styled as bold/italic and linked to the project's website.
      The text can also contain (GitHub Flavored) HTML syntax,
      for example, to make text bold, italic, or to add hyperlinks.
    type: string
  keywords:
    title: Keywords
    description: |
      Keywords to categorize the project and make it easier to discover.
      
      These are automatically added as
      [topics](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/classifying-your-repository-with-topics)
      to the GitHub repository (cf. [`repo.config.topics`](#cc.repo.config.topics)), and as
      [`keywords`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#keywords)
      metadata to the package's `pyproject.toml` file.
    type: object
    additionalProperties: false
    properties:
      display:
        title: Display
        description: |
          Display-friendly keywords.
          
          These can contain capital letters, spaces, and other characters,
          and are used on platforms that accept such keywords.
          For examples, they are added to the
          [`keywords`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#keywords)
          metadata of the package's `pyproject.toml` file,
          to be used on PyPI and TestPyPI platforms.
        type: array
        uniqueItems: true
        maxItems: 20
        items:
          title: Keyword
          description: A display-friendly keyword of the project.
          type: string
      slug:
        title: Slug
        description: |
          Machine-friendly keywords.
          
          These are used in places that only accept keyword slugs, for example for the
          [Topics](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/classifying-your-repository-with-topics)
          section of the GitHub repository (cf. [`repo.config.topics`](#cc.repo.config.topics)).
        auto: |
          If not provided, these are automatically generated from the [display keywords](##cc.keywords.display)
          by converting them to lowercase and replacing spaces with hyphens.
          Any resulting slug that still does not meet the requirements is discarded.
        type: array
        uniqueItems: true
        maxItems: 20
        items:
          title: Slug
          description: A machine-friendly keyword of the project.
          type: string
          maxLength: 50
          pattern: ^[A-Za-z0-9][A-Za-z0-9\-]*$
  highlights:
    title: Highlights
    description: |
      Key features of the project.
      
      These are automatically displayed on the repository's main README file
      (cf. [`docs.github`](##cc.doc.github)),
      on the homepage of the project's website,
      and on the project's PyPI and TestPyPI pages
      (cf. [`doc.pypi`](##cc.doc.pypi)).
    type: array
    uniqueItems: true
    items:
      title: Keynote
      description: A key feature of the project.
      type: object
      additionalProperties: false
      required: [ title, description ]
      properties:
        title:
          title: Title
          description: Title of the feature.
          type: string
        description:
          title: Description
          description: Description of the feature.
          type: string
  team:
    title: Team
    description: |
      Natural and legal persons (e.g., institution, team, research group, company, conference)
      involved in the project, e.g., copyright holders, authors, and maintainers.

      For each person, define a key-value pair,
      where the key is the ID of the person,
      which can be used to reference the person in other configurations.
    type: object
    properties:
      owner:
        title: Owner
        description: |
          The repository owner on GitHub.

          The `github` key is always automatically filled with information from the GitHub API.
          Any other keys that are not provided are also 
          automatically filled, as along as they have a corresponding information
          in the GitHub API (cf. [`entity`](##cc.def.entity)).
        $ref: '#/definitions/entity'
    additionalProperties:
      title: Entity
      description: A natural person or entity involved in the project.
      $ref: '#/definitions/entity'
  license:
    title: License
    description: |
      License of the project.

      You can either select one of the supported SPDX licenses by providing its `id`,
      or any other SPDX license by providing its `id`, `name`, `text`, and `notice`.
      When a supported `id` is set, all other keys are filled automatically.
      Nevertheless, you can still override any key by providing the corresponding custom value.

      The license is automatically incorporated into the project:
      - The license information is included in the license section of your documentation website.
      - The license text is used to generate the `LICENSE` file in the root of your repository,
        so that GitHub can automatically detect and display the license of your project.
      - The license file is also included in your package distribution and recognized by PyPI.

      :::{admonition} Learn More
      :class: dropdown seealso

      For more information about open-source licenses, see:
      - [SPDX License List](https://spdx.org/licenses/)
      - [Open Source Initiative](https://opensource.org/license)
      - [Choose a License](https://choosealicense.com/)
      :::
    examples:
      - id: unlicense
      - id: mit
        notice: |
          This is a custom license notice that overwrites
          the default MIT license's notice.
      - shortname: MCL v1.0
        fullname: My Custom License 1.0
        text: |
          My Custom License
          Version 1.0, January 2024
          https://mywebsite.com/my-custom-license
        notice: |
          Licensed under My Custom License, Version 1.0 (the "License");
          you may not use this file except in compliance with the License.
          You may obtain a copy of the License at https://mywebsite.com/my-custom-license
    type: object
    additionalProperties: false
    required: [ id ]
    properties:
      id:
        title: ID
        description: |
          [SPDX](https://spdx.org/licenses/) ID of the license.

          For a full list of machine-readable SPDX license identifiers, see the
          [SPDX GitHub repository](https://raw.githubusercontent.com/spdx/license-list-data/master/json/licenses.json)
          or the [CFF GitHub repository](https://github.com/citation-file-format/get-spdx-licenses).

          If one of the supported IDs are selected,
          the rest of the keys are automatically filled in.
          Otherwise, `name`, `text`, and `notice` must be provided.
          Supported IDs are:
            - `AGPL-3.0-or-later`: [GNU Affero General Public License v3 or later](https://choosealicense.com/licenses/agpl-3.0/)
            - `AGPL-3.0`: [GNU Affero General Public License v3](https://choosealicense.com/licenses/agpl-3.0/)
            - `GPL-3.0-or-later`: [GNU General Public License v3 or later](https://choosealicense.com/licenses/gpl-3.0/)
            - `GPL-3.0`: [GNU General Public License v3](https://choosealicense.com/licenses/gpl-3.0/)
            - `MPL-2.0`: [Mozilla Public License 2.0](https://choosealicense.com/licenses/mpl-2.0/)
            - `Apache-2.0`: [Apache License 2.0](https://choosealicense.com/licenses/apache-2.0/)
            - `MIT`: [MIT License](https://choosealicense.com/licenses/mit/)
            - `BSD-2-Clause`: [BSD 2-Clause "Simplified" License](https://choosealicense.com/licenses/bsd-2-clause/)
            - `BSD-3-Clause`: [BSD 3-Clause "New" or "Revised" License](https://choosealicense.com/licenses/bsd-3-clause/)
            - `BSL-1.0`: [Boost Software License 1.0](https://choosealicense.com/licenses/bsl-1.0/)
            - `Unlicense`: [The Unlicense](https://choosealicense.com/licenses/unlicense/)
        type: string
      name:
        title: Full Name
        description: Full name of the license.
        type: string
        examples:
          - GNU Affero General Public License v3.0 or later
          - MIT License
          - BSD 3-Clause License
      trove_classifier:
        title: Trove Classifier
        description: |
          [Trove classifier](https://pypi.org/classifiers/) of the license.

          This is automatically added to package metadata
          (cf. [`package.classifiers`](##cc.package.classifiers))
          to help PyPI better categorize your package,
          so that users can find your package when searching for packages with a specific license.
        type: string
        pattern: "^License :: "
        examples:
          - License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)
          - License :: OSI Approved :: MIT License
          - License :: OSI Approved :: BSD License
      text:
        title: Full Text
        description: Full text of the license.
        type: string
      notice:
        title: Notice
        description: |
          Short text of the license, i.e., the license notice.

          By default, this is automatically added to the main docstring of the package
          (cf. [`package.docs.init`](##cc.package.docs.init)).
        type: string
      path:
        title: License
        description: |
          Path to the
          [`LICENSE`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository)
          file (cf. [`license`](#cc.license)).

          This file must be named `LICENSE` (case-sensitive)
          and placed in the root of the repository. 
          It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
        type: string
        pattern: ^LICENSE(?i:.(txt|md|rst))?$
        default: LICENSE
        examples:
          - LICENSE.md
          - LICENSE.txt
          - LICENSE.rst
  copyright:
    title: Copyright
    description: |
      Copyright information of the project.

      The copyright [`notice`](##cc.copyright.notice)
      is automatically included in several places,
      such as the license texts (when a pre-defined license is used),
      the main docstring of the package (cf. [`package.docs.init`](##cc.package.docs.init)),
      the footer of README and community files (cf. [`doc.footer`](##cc.doc.footer)),
      as well as the website footer.
    examples:
      - owner: ${{ people.owner.name.full }}
      - owner: John Doe
      - owner: ${{ people.owner.name.full }}
        year_start: 2020
    type: object
    additionalProperties: false
    required: [ notice ]
    properties:
      notice:
        title: Notice
        description: |
          Copyright notice.

          If provided, all
        type: string
        examples:
          - ${{ copyright.period }} ${{ people.owner.name.full }}
          - ${{ copyright.period }} John Doe
          - A Custom Copyright Notice
      period:
        title: Period
        description: |
          Year period to use in the copyright [notice](##cc.copyright.notice).

          If not provided, it will be automatically set
          using the value of [`start_year`](##cc.copyright.start_year), as follows:
          - If `start_year` is the same as the current year, 
            the period is set to the current year, e.g., `2024`.
          - If `start_year` is before the current year,
            the period is set to `{start_year}–{CURRENT-YEAR}`, e.g., `2023–2024`.
          - If `start_year` is after the current year, an error is raised.
        type: string
      start_year:
        title: Start Year
        description: |
          Start year of the project.

          This can be used to dynamically set the [`period`](##cc.copyright.period).
          if not provided, it will be automatically set to the creation year of the repository.
        type: integer
        minimum: 1980
        maximum: 2040
  contact:
    title: Contact Information
    description: Contact information of the project.
    type: object
    additionalProperties: false
    properties:
      email:
        title: Email
        description: Email address of the project.
        $ref: '#/definitions/email'
      orcid:
        title: ORCID
        description: ORCID iD of the project.
        $ref: '#/definitions/orcid'
  maintain:
    title: Maintainers
    description: Maintainers of the project
    type: object
    additionalProperties: false
    properties:
      pull:
        description: Pull request reviewers of the project.
        type: object
        additionalProperties: false
        properties:
          code_owners:
            title: Code Owners
            description: |
              Project code owners.

              This is used to automatically maintain the
              [CODEOWNERS](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)
              file (cf. [`doc.code_owners`](##cc.doc.code_owners)).
            type: array
            minItems: 1
            uniqueItems: true
            items:
              title: Code Owners Definition
              description: Code owners of a specific path.
              type: object
              minProperties: 1
              maxProperties: 1
              additionalProperties:
                title: Code Owners
                description: Code owners of the path.
                type: array
                minItems: 1
                uniqueItems: true
                items:
                  title: Code Owner
                  description: ID of the code owner, as defined in [`people`](##cc.people).
                  type: string
      issue:
        title: Issues
        description: |
          Assignees of project issues.

          For each issue form defined in [`issue.forms`](##cc.issue.forms),
          you can add a key-value pair, where the key is the issue form's [`id`](##cc.issue.forms[i].id).
        type: object
        additionalProperties:
          title: Assignees
          description: Assignees for the project issues.
          type: array
          uniqueItems: true
          items:
            title: Assignee
            description: |
              ID of the assignee, as defined in [`people`](##cc.people).
            type: string
      discussion:
        description: Assignees for the project discussions
        type: object
        additionalProperties:
          title: Assignees
          description: Assignees for the project discussions.
          type: array
          minItems: 1
          uniqueItems: true
          items:
            title: Assignee
            description: |
              ID of the assignee, as defined in [`people`](##cc.people).
            type: string
      security:
        title: Security
        description: ID of project's security maintainer, as defined in [`people`](##cc.people).
        type: string
      code_of_conduct:
        title: Code of Conduct
        description: ID of project's code of conduct enforcer, as defined in [`people`](##cc.people).
        type: string
      support:
        title: Support
        description: ID of project's support contact, as defined in [`people`](##cc.people).
        type: string
  citation:
    title: Citation
    description: |
      Project citation information.

      This is used to automatically maintain a
      [CITATION file](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files)
      ([CFF v1.2.0](https://citation-file-format.github.io/))

      https://citation-file-format.github.io/1.2.0/schema.json

      https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content
    type: object
    additionalProperties: false
    required: [ message, title, authors ]
    properties:
      authors:
        title: Authors
        description: |
          Core author(s) of the project, ordered by contribution (highest first).

          These are automatically displayed on the Credits section of the project's website,
          the front page of the project's PDF documentation,
          and the project's PyPI and TestPyPI pages
          (by being added to package metadata, i.e.,
          the [`project.authors`](https://packaging.python.org/en/latest/specifications/pyproject-toml/#authors-maintainers)
          key of the `pyproject.toml` file).
        type: array
        uniqueItems: true
        minItems: 1
        examples:
          - - id: owner
              roles: [ concept, dev, manage ]
            - id: some_author_id
              roles: [ dev, maint ]
        default: [ owner ]
        items:
          title: Author
          description: An author of the project/package.
          type: object
          additionalProperties: false
          required: [ id ]
          properties:
            id:
              title: Author ID
              description: ID of the author, as defined in [`people`](##cc.people).
              type: string
            roles:
              title: Author Roles
              description: Roles of the author.
              type: array
              uniqueItems: true
              items:
                title: Role ID
                description: ID of the role, defined as a key in [`citation.role`](##cc.citation.role).
                type: string
      contacts:
        title: Contacts
        description: |
          Contact persons of the project.
        type: array
        uniqueItems: true
        minItems: 1
        items:
          title: Contact ID
          description: ID of the contact person, as defined in [`people`](##cc.people).
          type: string
      message:
        title: Message
        description: |
          A message to the human reader of the file
          to let them know what to do with the citation metadata.
        type: string
        minLength: 1
        examples:
          - If you use this software, please cite both the article from preferred-citation and the software itself.
          - If you use this software, please cite it using the metadata from this file.
          - Please cite this software using these metadata.
          - Please cite this software using the metadata from 'preferred-citation'.
      title:
        title: Title
        description: The name of the project.
        type: string
        minLength: 1
        examples:
          - ${{ name }}
          - ${{ package.name }}
          - A Custom Title
      abstract:
        title: Abstract
        description: A description of the project.
        type: string
        examples:
          - ${{ description }}
          - A custom description of the project that can span multiple lines.
      keywords:
        title: Keywords
        description: Keywords that describe the work.
        type: array
        uniqueItems: true
        examples:
          - ${{ keywords }}
          - [ A Custom Keyword, Another Custom Keyword ]
        items:
          type: string
          minLength: 1
      repository:
        title: Repositories
        description: |
          Repository information.
        type: object
        additionalProperties: false
        properties:
          build:
            title: Build
            description: The URL of the software in a build artifact/binary repository.
            $ref: '#/definitions/url'
          source:
            title: Source
            description: The URL of the software or dataset in a source code repository.
            $ref: '#/definitions/url'
          other:
            title: Other
            description: |
              The URL of the software or dataset in a repository that is
              neither a source code nor a build artifact repository.
            $ref: '#/definitions/url'
      url:
        title: URL
        description: The URL of a landing page/website for the software or dataset.
        $ref: '#/definitions/url'
      type:
        title: Type
        description: The type of the work.
        type: string
        enum: [ dataset, software ]
        default: software
      preferred_citation:
        title: Preferred Citation
        description: |
          A reference to another work that should be cited
          instead of the software or dataset itself.
        $ref: '#/definitions/reference'
      references:
        title: References
        description: Reference(s) to other creative works.
        type: array
        uniqueItems: true
        items:
          title: Reference
          description: A reference to another work.
          $ref: '#/definitions/reference'
      license:
        title: License
        description: SPDX license ID of the project (cf. [`license.id`](##cc.license.id)).
        type: string
      license_url:
        title: License URL
        description: |
          The URL of the license text under which the software or dataset is
          licensed (only for non-standard licenses not included in the SPDX License List).
        $ref: '#/definitions/url'
      grant_ids:
        title: Grant IDs
        description: |
          List of OpenAIRE-supported grants, which have funded the research for this project.
        type: array
        uniqueItems: true
        items:
          title: Grant ID
          description: |
            A funder-DOI-prefixed grant ID, or a European Commission grant ID.
          type: string
          examples:
            - 10.13039/501100000780::283595
            - 283595
      zenodo_communities:
        title: Zenodo Communities
        description: |
          List of communities you wish the project to appear in.
          The owner of the community will be notified,
          and can either accept or reject your request.
        type: array
        uniqueItems: true
        items:
          title: Zenodo Community
          description: A Zenodo community ID.
          type: string
          examples:
            - ecfunded
      identifiers:
        title: Identifiers
        description: The identifiers of the project.
        type: array
        uniqueItems: true
        minItems: 1
        items:
          title: Identifier
          description: An identifier of the project.
          $ref: '#/definitions/identifier'
      language:
        title: Language
        description: |
          [ISO 639-2](https://www.loc.gov/standards/iso639-2/php/code_list.php)
          or 639-3 code of the primary natural language of the work.
        type: string
        examples:
          - eng
      role:
        title: Roles
        description: |
          Author role definitions.

          For each role, add a key-value pair,
          where the key is the ID of the role, used to attribute roles to authors
          (cf. [`authors.info.[i].roles`](##cc.authors.info.[i].roles)).
        type: object
        examples:
          - concept:
              title: Conceptualization
              description: Formulation and evolution of overarching project goals and aims.
              abbreviation: CNP
            dev:
              title: Software Development
              description: Implementation of the software.
              abbreviation: DEV
            manage:
              title: Management
              description: Project administration and coordination.
              abbreviation: MAN
            maint:
              title: Maintenance
              description: Maintenance of the software and development workflows.
              abbreviation: MNT
        additionalProperties:
          title: Author Role
          description: |
            An author role definition.
          examples:
            - title: Conceptualization
              description: Formulation and evolution of overarching project goals and aims.
              abbreviation: CNP
          type: object
          additionalProperties: false
          required: [ title, description, abbreviation ]
          properties:
            title:
              title: Title
              description: Name of the role.
              type: string
              examples:
                - Conceptualization
                - Software Development
                - Management
            description:
              title: Description
              description: A short description of the role.
              type: string
              examples:
                - Formulation and evolution of overarching project goals and aims.
                - Implementation of the software.
                - Project administration and coordination.
            abbreviation:
              title: Abbreviation
              description: Abbreviation of the role title.
              type: string
              examples:
                - CNP
                - DEV
                - MAN
      path:
        title: Path
        description: |
          The path to the CITATION file.
        type: string
        enum: [ CITATION.cff ]
        default: CITATION.cff
  funding:
    Title: Funding
    description: |
      Available funding options of the project.

      These settings are used to automatically maintain the GitHub `FUNDING` configuration file,
      which is used to [display a sponsor button in your repository](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/displaying-a-sponsor-button-in-your-repository).
      Clicking on the *Sponsor* button opens the *Sponsor this project* section,
      where a list of links to your specified funding platforms is displayed to the user.
      
      You can specify up to four
      [sponsored GitHub accounts]([GitHub Sponsors Docs](https://docs.github.com/en/sponsors/receiving-sponsorships-through-github-sponsors),
      up to four custom URLs,
      and one account per supported external funding platform.
    examples:
      - github: [ ${ { owner.username } }, EXAMPLE-GITHUB-USERNAME ]
        custom: [ https://paypal.me/EXAMPLE-PAYPAL-USERNAME ]
        tideleft: pypi/${{ package.name }}
    type: object
    additionalProperties: false
    properties:
      community_bridge:
        title: Community Bridge
        description: |
          [LFX Mentorship (CommunityBridge)](https://lfx.linuxfoundation.org/tools/mentorship) project name.
        type: string
      issuehunt:
        title: IssueHunt
        description: |
          [IssueHunt](https://issuehunt.io/) username.
        type: string
      ko_fi:
        title: Ko-fi
        description: |
          [Ko-fi](https://ko-fi.com/) username.
        type: string
      liberapay:
        title: Liberapay
        description: |
          [Liberapay](https://liberapay.com/) username.
        type: string
      open_collective:
        title: Open Collective
        description: |
          [Open Collective](https://opencollective.com/) username.
        type: string
      patreon:
        title: Patreon
        description: |
          [Patreon](https://www.patreon.com/) username.
        type: string
      tidelift:
        title: Tidelift
        description: |
          [Tidelift](https://tidelift.com/) package address.

          This is a string with the format `<PLATFORM-NAME>/<PACKAGE-NAME>`,
          where `<PACKAGE-NAME>` is the name of your package,
          and platform name is the name of the package manager
          hosting the package, i.e., one of
          `npm`, `pypi`, `maven`, `rubygems`, `nuget`, or `packagist`.
        examples:
          - pypi/controlman
        type: string
        pattern: ^(npm|pypi|rubygems|maven|packagist|nuget)/\S+$
      polar:
        title: Polar
        description: |
          [Polar](https://www.polar.sh/) username.
        type: string
      buy_me_a_coffee:
        title: Buy Me a Coffee
        description: |
          [Buy Me a Coffee](https://www.buymeacoffee.com/) username.
        type: string
      github:
        title: GitHub Sponsors
        description: |
          Usernames of up to four
          [GitHub Sponsors](https://docs.github.com/en/sponsors/)
          accounts.

          One of these can be a [sponsored organization account](https://docs.github.com/en/sponsors/receiving-sponsorships-through-github-sponsors/setting-up-github-sponsors-for-your-organization),
          while the others must be [sponsored personal accounts](https://docs.github.com/en/sponsors/receiving-sponsorships-through-github-sponsors/setting-up-github-sponsors-for-your-personal-account).
        type: array
        maxItems: 4
        uniqueItems: true
        items:
          title: GitHub Username
          description: Username of the sponsored GitHub account.
          $ref: '#/definitions/github_username'
      custom:
        title: Custom
        description: |
          URLs of up to four custom funding platforms.
        type: array
        maxItems: 4
        uniqueItems: true
        items:
          title: Funding URL
          description: URL of a custom funding platform.
          $ref: '#/definitions/url'
      path:
        title: Path
        description: |
          Path to the funding configuration file.

          Currently, GitHub only recognizes this file at `.github/FUNDING.yml`.
        type: string
        enum: [ .github/FUNDING.yml ]
        default: .github/FUNDING.yml
  theme:
    title: Theme
    description: Configurations defining the visual theme of the project.
    type: object
    additionalProperties: false
    required: [ color ]
    properties:
      color:
        title: Colors
        description: |
          Colors of the project's theme.
          All colors must be in hexadecimal format (without the leading `#` character).
        type: object
        required: [ primary, secondary ]
        properties:
          primary:
            title: Primary
            description: Primary colors of the project
            $ref: '#/definitions/color_config'
          secondary:
            title: Secondary
            description: Secondary colors of the project
            $ref: '#/definitions/color_config'
      footer:
        default: { }
        oneOf:
          - type: "null"
          - type: object
            default: { }
            additionalProperties: false
            properties:
              type:
                description: Type of the footer.
                type: string
                enum: [ pypackit-default, custom, manual ]
                default: pypackit-default
              config:
                title: Configurations
            required: [ type, config ]
        allOf:
          - if:
              properties:
                type:
                  const: pypackit-default
            then:
              properties:
                config:
                  $ref: '#/definitions/theme-pypackit-default-footer'
          - if:
              properties:
                type:
                  const: custom
            then:
              properties:
                config:
                  description: Configurations for the custom theme.
                  type: object
                  default: { }
          - if:
              properties:
                type:
                  const: manual
            then:
              properties:
                config:
                  description: Content of the footer.
                  type: string
                  default: ""
  web:
    title: Website
    description: Configurations for the project's website
    examples:
      - theme:
          color:
            primary:
              light: '135400'
              dark: 'C2726D'
            secondary:
              light: '055005'
              dark: 'C7A43C'
        analytics:
          plausible:
            domain: ""
            url: ""
          google_id: "G-0X66W6TGL2"
        announcement_retention_days: 30
        navbar_icons:
          - name: PyPI Distribution
            icon: fa-brands fa-python
            url: ${{ url.pypi }}
          - name: Conda Distribution
            icon: _static/img/icon/conda.svg
            url: ${{ url.conda }}
            type: local
            attributes:
              class: nav-link fa-conda
          - name: Source Repository
            icon: fa-brands fa-github
            url: ${{ url.github.home }}
          - name: Issues
            icon: fa-regular fa-circle-dot
            url: ${{ url.github.issues.home }}
          - name: Pull Requests
            icon: fa-solid fa-code-pull-request
            url: ${{ url.github.pulls.home }}
          - name: Discussions
            icon: fa-solid fa-comments
            url: ${{ url.github.discussions.home }}
          - name: Email
            icon: fa-regular fa-envelope
            url: mailto:${{ maintainer.email.main }}
          - name: License
            icon: fa-solid fa-copyright
            url: ${{ url.website.license }}
        path:
          contact: 'help/contact'
          news: 'news'
          contributors: 'about/#contributors'
          contributing: 'contribute'
          bug_report: 'contribute/feedback/report'
          license: 'license'
          security_measures: 'contribute/collaborate/maintain/security'
          sponsor: 'contribute/collaborate/maintain/sponsor'
        quicklinks: subsections
        readthedocs:
          name: ${{ package.name }}
          build:
            os: ubuntu-22.04
            tools:
              python: "mambaforge-4.10"
            jobs:
              post_checkout:
                # versioningit needs the full git history to determine the package's version at build time.
                # see: https://github.com/readthedocs/readthedocs.org/issues/5989#issuecomment-853039401
                - git fetch --unshallow
          conda:
            environment: ${{ path.dir.website }}/requirements.yaml
          python:
            install:
              - method: pip
                path: .
          sphinx:
            configuration: ${{ path.dir.website }}/source/conf.py
            builder: dirhtml
            fail_on_warning: false
          formats: all
    type: object
    additionalProperties: false
    required: [ announcement_retention_days, path ]
    properties:
      analytics:
        title: Web Analytics
        description: Configurations of web analytics services
        type: object
        additionalProperties: false
        properties:
          google_id:
            description: Google Analytics ID
            type: string
          plausible:
            description: Plausible Analytics data
            type: object
            additionalProperties: false
            properties:
              domain:
                description: Domain for Plausible Analytics
                type: string
              url:
                description: URL for Plausible Analytics
                type: string
                format: uri
            required: [ domain, url ]
      announcement:
        properties:
          path:
            title: Announcement
            description: Path to the announcement banner file.
            type: string
            default: ${{ path.dir.website }}/announcement.html
            examples:
              - docs/announcement.html
          retention_days:
            description: Number of days to keep an announcement before removing it from the website
            type: integer
            minimum: 0
            default: 30
      navbar_icons:
        description: Icons to be shown in the navigation bar of the website
        type: array
        default: [ ]
        uniqueItems: true
        items:
          type: object
          additionalProperties: false
          examples:
            - name: Twitter
              icon: fa-brands fa-twitter
              url: ${{ owner.url.twitter }}
            - name: LinkedIn
              icon: fa-brands fa-linkedin
              url: ${{ owner.url.linkedin }}
            - name: ResearchGate
              icon: fa-brands fa-researchgate
              url: ${{ owner.url.researchgate }}
            - name: ORCiD
              icon: fa-brands fa-orcid
              url: ${{ owner.url.orcid }}
          properties:
            id:
              type: string
            name:
              type: string
            icon:
              type: string
            url:
              type: string
              format: uri
            type:
              enum:
                - fontawesome
                - url
                - local
            attributes:
              type: object
      quicklinks:
        title: Quicklinks
        description: Quicklinks for the navbar
        type: array
        uniqueItems: true
        default: ${{ path.web.subsections }}
        items:
          type: object
          additionalProperties: false
          properties:
            required: [ title, entries ]
            section_title:
              type: string
            subsections:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                type: object
                additionalProperties: false
                required: [ title, path ]
                properties:
                  title:
                    type: string
                  path:
                    type: string
      path:
        title: Documentation
        description:
          Paths to important pages on the website.

          All paths must be relative to the root of the website directory, without suffix.
        type: object
        default: { }
        required: [ blog ]
        additionalProperties:
          title: Page Path
          description: Relative path to the page
          type: string
          examples:
            - about/license
            - help/contact
        properties:
          blog:
            title: Blog
            description: Path to the website's blog directory.
            type: string
            default: news
          sections:
            title: Sections
            description: |
              Paths to main sections of the website.

              This is automatically generated from the `toctree` of the website's main `index` file.
            type: array
            uniqueItems: true
            items:
              title: Section
              description: A main section of the website.
              $ref: "#/definitions/web_section"
          subsections:
            title: Subsections
            description: |
              Paths to subsections of the website, i.e., level-2 sections.

              This is automatically generated from the `toctree` of the website's main `index` file,
              and the `tocree`s of files listed there.
            type: array
            uniqueItems: true
            items:
              title: Section Subsections
              description: Subsections of a specific section of the website.
              type: object
              additionalProperties: false
              properties:
                section_title:
                  title: Section Title
                  description: Title of the main section.
                  type: string
                  examples:
                    - User Manual
                    - Installation
                subsections:
                  title: Subsections
                  description: Paths to subsections of the main section.
                  type: array
                  uniqueItems: true
                  items:
                    title: Subsection
                    description: A subsection of the main section.
                    $ref: "#/definitions/web_section"
  readme:
    title: README Files
    description: |
      README file configuration. 
      
      These include README files that are displayed to users on landing pages of
      project's repositories, such as GitHub, PyPI, and Anaconda, as well as
      README files in different directories of the repository providing
      technical information to contributors and reviewers.
      
      :::{admonition} Supported Syntax
      :class: dropdown info

      GitHub, PyPI, and Anaconda.org all support markup languages such as Markdown and reStructuredText
      for defining the contents of files.
      That is, when the file extension is in a supported format (e.g., `.md`, `.rst`),
      the contents are rendered as HTML on the respective platforms.
      However, GitHub only allows [GitHub Flavored Markdown](https://github.github.com/gfm/) syntax,
      and performs additional post-processing and sanitization after rendering the contents to HTML,
      due to security concerns. This means that only a 
      [limited subset of HTML features](https://docs.github.com/en/get-started/writing-on-github)
      are supported.
      Like GitHub, PyPI and Anaconda also impose several restrictions
      and perform additional post-processing and sanitization.
      PyPI uses the [Readme Renderer](https://github.com/pypa/readme_renderer) library
      to render the README file, which only supports a
      [limited subset of HTML tags](https://github.com/pypa/readme_renderer/blob/9c2eb81301bc230f2795cf7e6dc2c23f5815ea41/readme_renderer/clean.py#L20-L31)
      and [attributes](https://github.com/pypa/readme_renderer/blob/9c2eb81301bc230f2795cf7e6dc2c23f5815ea41/readme_renderer/clean.py#L33-L65).
      Since these do not completely overlap with the features supported by GitHub,
      a separate [PyPI-friendly README](https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/)
      must be provided for PyPI, to ensure that the contents are correctly rendered on the package index.
      :::
    type: object
    additionalProperties: false
    properties:
      github:
        title: GitHub README
        description: |
          Main [`README`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)
          file of the GitHub repository.
        properties:
          path:
            title: Filepath
            description: |
              Path to the README file.

              It must be named `README` (case-sensitive) and placed either in the
              `.github` directory, the `docs` directory, or the root of the repository,
              and can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
              If more than one of such files are present, the order of precedence is
              `.github`, then root, and finally the `docs` directory.
            type: string
            pattern: ^(?:|.github/|docs/)README(?i:.(txt|md|rst))?$
            default: README.md
            examples:
              - README
              - README.md
              - .github/README.txt
              - docs/README.rst
        $ref: '#/definitions/index_repo'
      pypi:
        title: PyPI README
        description: |
          README file of the PyPI/TestPyPI package.

          `readme` metadata of your package
          (formerly known as `long_description`)
        properties:
          path:
            title: Filepath
            description: Path to the PyPI README file.
            type: string
            examples:
              - ${{ path.dir.source }}/README_PYPI.md
              - README_PYPI.md
        $ref: '#/definitions/index_repo'
      conda:
        title: Conda README
        description: README file of the Conda package.
        properties:
          path:
            title: Conda
            description: Path to the Conda README file.
            type: string
            examples:
              - ${{ path.dir.source }}/README_CONDA.md
              - README_CONDA.md
        $ref: '#/definitions/index_repo'
      dir:
        title: Directory READMEs
        description: |
          Configurations for README files in different directories of the repository.
          For each readme file, add a key-value pair where the key is the path to the directory.
        type: object
        additionalProperties:
          title: Directory README
          description: Configuration for a directory README file.
          type: object
          properties:
            type:
              title: Type
              description: |
                Type of the README file content.
              type: string
              enum: [ custom, manual ]
              default: manual
            config:
              title: Configurations
            include_footer:
              type: boolean
              default: true
          required: [ type, config, include_footer ]
          allOf:
            - if:
                properties:
                  type:
                    const: custom
              then:
                properties:
                  config:
                    description: Configurations for the custom theme.
                    type: object
                    default: { }
            - if:
                properties:
                  type:
                    const: manual
              then:
                properties:
                  config:
                    description: Content of the directory README file.
                    type: string
                    default: ""
  health:
    description: |
      Configurations for 
      [community health files](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file).

    properties:
      contributing:
        title: Contributing Guidelines
        description: |
          Contributing guidelines of the project.

          This corresponds to the [`CONTRIBUTING`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage,
          as well as when users create an issue or open a pull request.

          This file is used to communicate how people can contribute to the project,
          and may include information on how to report bugs, suggest enhancements,
          and submit code changes, as well as references to documentation, contact information,
          and other resources. We recommend to keep this file short,
          and only include links to resources on the project's website,
          as to avoid duplication of content.
        properties:
          path:
            title: Contributing Guidelines
            description: |
              Path to the
              [`CONTRIBUTING`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)
              file (cf. [`doc.contributing`](#cc.doc.contributing)).

              This file must be named `CONTRIBUTING` (case-insensitive)
              and placed either in the `.github` directory, the `docs` directory,
              or the root of the repository. It can have the extensions `.txt`, `.md`, or `.rst`.
            type: string
            pattern: (?i)^(?:|.github/|docs/)CONTRIBUTING(?:.(txt|md|rst))?$
            default: CONTRIBUTING.md
            examples:
              - CONTRIBUTING
              - CONTRIBUTING.md
              - contributing.rst
              - docs/CONTRIBUTING.txt
              - .github/contributing.md
        $ref: '#/definitions/health_file'
      governance:
        title: Governance Model
        description: |
          Governance model of the project.

          This corresponds to the `GOVERNANCE`
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage.

          This file is used to communicate how decisions are made in the project,
          and may include information on how the project is managed, how decisions are made,
          and how conflicts are resolved.
          We recommend to keep this file short,
          and only include links to resources on the project's website,
          as to avoid duplication of content.
        properties:
          path:
            title: Governance Model
            description: |
              Path to the `GOVERNANCE`
              file (cf. [`doc.governance`](#cc.doc.governance)).

              This file must be named `GOVERNANCE` (case-sensitive)
              and placed either in the `.github` directory, the `docs` directory,
              or the root of the repository. 
              It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
            type: string
            pattern: ^(?:|.github/|docs/)GOVERNANCE(?i:.(txt|md|rst))?$
            default: GOVERNANCE.md
            examples:
              - GOVERNANCE
              - GOVERNANCE.md
              - docs/GOVERNANCE.txt
              - .github/GOVERNANCE.md
        $ref: '#/definitions/health_file'
      security:
        title: Security Policy
        description: |
          Security policy of the project.

          This corresponds to the
          [`SECURITY`](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository)
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage,
          as well as when users want to create a new issue or security advisory. 

          This file is used to communicate how security vulnerabilities are handled in the project,
          and may include information on how to report security vulnerabilities,
          how they are triaged, and how they are resolved.
          We recommend to keep this file short,
          and only include links to resources on the project's website,
          as to avoid duplication of content.
        properties:
          path:
            title: Security Policy
            description: |
              Path to the
              [`SECURITY`](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository)
              file (cf. [`doc.security`](#cc.doc.security)).

              This file must be named `SECURITY` (case-sensitive)
              and placed either in the `.github` directory, the `docs` directory,
              or the root of the repository. 
              It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
            type: string
            pattern: ^(?:|.github/|docs/)SECURITY(?i:.(txt|md|rst))?$
            default: SECURITY.md
            examples:
              - SECURITY
              - SECURITY.md
              - docs/SECURITY.txt
              - .github/SECURITY.md
        $ref: '#/definitions/health_file'
      support:
        title: Support Resources
        description: |
          Support resources of the project.

          This corresponds to the [`SUPPORT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-support-resources-to-your-project)
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage,
          as well as when users are creating a new issue.

          This file is used to communicate how users can get support for the project,
          and may include information on how to ask questions, report issues, and request features.
          We recommend to keep this file short,
          and only include links to resources on the project's website,
          as to avoid duplication of content.
        properties:
          path:
            title: Support Policy
            description: |
              Path to the
              [`SUPPORT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-support-resources-to-your-project)
              file (cf. [`doc.support`](#cc.doc.support)).

              This file must be named `SUPPORT` (case-sensitive)
              and placed either in the `.github` directory, the `docs` directory,
              or the root of the repository. 
              It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
            type: string
            pattern: ^(?:|.github/|docs/)SUPPORT(?i:.(txt|md|rst))?$
            default: SUPPORT.md
            examples:
              - SUPPORT
              - SUPPORT.md
              - docs/SUPPORT.txt
              - .github/SUPPORT.md

        $ref: '#/definitions/health_file'
      code_of_conduct:
        title: Code of Conduct
        description: |
          Code of conduct of the project.

          This corresponds to the
          [`CODE_OF_CONDUCT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage,
          as well as when users are creating a new issue or opening a pull request.
          However, for "Code of conduct" to be marked as complete in the repository's community profile,
          GitHub only accepts the
          [Contributor Covenant](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html)
          and the [Citizen Code of Conduct](http://stumptownsyndicate.org/).

          This file is used to communicate the standards of behavior expected from contributors,
          and may include information on how to report violations, how they are triaged,
          and how they are resolved.
        type: object
        default: { }
        additionalProperties: false
        properties:
          type:
            title: Type
            description:
            type: string
            enum: [ contributor_covenant, custom, manual ]
            default: contributor_covenant
          config:
            title: Configurations
          path:
            title: Filepath
            description: |
              Path to the
              [`CODE_OF_CONDUCT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)
              file (cf. [`doc.code_of_conduct`](#cc.doc.code_of_conduct)).

              This file must be named `CODE_OF_CONDUCT` (case-sensitive)
              and placed either in the `.github` directory, the `docs` directory,
              or the root of the repository.
              It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
            type: string
            pattern: ^(?:|.github/|docs/)CODE_OF_CONDUCT(?i:.(txt|md|rst))?$
            default: CODE_OF_CONDUCT.md
            examples:
              - CODE_OF_CONDUCT
              - CODE_OF_CONDUCT.md
              - docs/CODE_OF_CONDUCT.txt
              - .github/CODE_OF_CONDUCT.MD
          include_footer:
            type: boolean
            default: true
        required: [ type, config, path, include_footer ]
        allOf:
          - if:
              properties:
                type:
                  const: contributor_covenant
            then:
              properties:
                config:
                  description: Configurations for the custom theme.
                  type: object
                  default: { }
                  additionalProperties: false
                  properties:
                    contact:
                      type: object
                      default: { }
                      additionalProperties: false
                      properties:
                        type:
                          type: string
                          enum: [ email, url ]
                          default: email
                        address:
                          type: string
                          default: "${{ maintainer.email.code_of_conduct }}"
                        display_name:
                          type: string
                          default: "${{ maintainer.email.code_of_conduct }}"
          - if:
              properties:
                type:
                  const: custom
            then:
              properties:
                config:
                  description: Configurations for the custom theme.
                  type: object
                  default: { }
          - if:
              properties:
                type:
                  const: manual
            then:
              properties:
                config:
                  description: Content of the directory README file.
                  type: string
                  default: ""
      code_owners:
        type: object
        default: { }
        additionalProperties: false
        properties:
          path:
            title: Code Owners
            description: |
              Path to the
              [`CODEOWNERS`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)
              file (cf. [`doc.code_owners`](#cc.doc.code_owners)).

              This file must be named `CODEOWNERS` (case-sensitive, without extension)
              and placed either in the `.github` directory, the `docs` directory,
              or the root of the repository.
            type: string
            pattern: ^(?:|.github/|docs/)CODEOWNERS$
            default: .github/CODEOWNERS
            examples:
              - CODEOWNERS
              - .github/CODEOWNERS
              - docs/CODEOWNERS
        required: [ path ]
  url:
    title: URLs
    description: |
      URLs of the project.
    type: object
    default: { }
    properties:
      repo:
        title: GitHub
        description: GitHub repository URLs.
        type: object
        default: { }
        properties:
          home:
            title: Home
            description: Repository homepage.
            default: ${{ repo.info.html_url }}
            $ref: '#/definitions/url'
          issues:
            title: Issues
            description: GitHub Issues URLs.
            type: object
            default: { }
            properties:
              home:
                title: Home
                description: URL of the repository's GitHub Issues homepage.
                default: ${{ url.repo.home }}/issues
                $ref: '#/definitions/url'
              template_chooser:
                title: Template Chooser
                description: URL of repository's GitHub Issue template chooser.
                default: ${{ url.repo.issues.home }}/new/choose
                $ref: '#/definitions/url'
              new:
                title: New Issues
                description: |
                  URLs for opening a new issue.

                  For each issue form defined in [`issue.forms`](##cc.issue.forms),
                  a key-value pair is automatically added here,
                  where the key is the [`id`](##cc.issue.forms[i].id) of the form,
                  and the value is the URL for opening a new issue with that form.
                type: object
                default: { }
                additionalProperties:
                  title: New Issue URL
                  description: URL for opening a new issue with a specific template.
                  $ref: '#/definitions/url'
          pulls:
            title: Pull Requests
            description: GitHub Pull Requests URLs.
            type: object
            default: { }
            properties:
              home:
                title: Home
                description: URL of the repository's GitHub Pull Requests homepage.
                default: ${{ url.repo.home }}/pulls
                $ref: '#/definitions/url'
          discussions:
            title: Discussions
            description: GitHub Discussions URLs.
            type: object
            default: { }
            properties:
              home:
                title: Home
                description: URL of the repository's GitHub Discussions homepage.
                default: ${{ url.repo.home }}/discussions
                $ref: '#/definitions/url'
              new:
                title: New Discussions
                description: |
                  URLs for opening a new discussion.

                  For each discussion category in [`discussion.category`](##cc.discussion.category),
                  a key-value pair is automatically added here,
                  where the key is the same as in `discussion.category` (i.e., the slug of the category name),
                  and the value is the URL for opening a new discussion in that category.
                type: object
                default: { }
                additionalProperties:
                  title: New Discussion URL
                  description: URL for opening a new discussion in a specific category.
                  $ref: '#/definitions/url'
          actions:
            title: Actions
            description: GitHub Actions URLs.
            type: object
            default: { }
            properties:
              home:
                title: Home
                description: URL of the repository's GitHub Actions homepage.
                default: ${{ url.repo.home }}/actions
                $ref: '#/definitions/url'
          releases:
            title: Releases
            description: GitHub Releases URLs.
            type: object
            default: { }
            properties:
              home:
                title: Home
                description: URL of the repository's GitHub Releases homepage.
                default: ${{ url.repo.home }}/releases
                $ref: '#/definitions/url'
          security:
            title: Security
            description: GitHub Security URLs.
            type: object
            default: { }
            properties:
              home:
                title: Home
                description: URL of the repository's GitHub Security homepage.
                default: ${{ url.repo.home }}/security
                $ref: '#/definitions/url'
              policy:
                title: Policy
                description: URL of the repository's security policy.
                default: ${{ url.repo.security.home }}/policy
                $ref: '#/definitions/url'
              advisories:
                title: Advisories
                description: URL of the repository's security advisories.
                default: ${{ url.repo.security.home }}/advisories
                $ref: '#/definitions/url'
              new_advisory:
                title: New Advisory
                description: URL for creating a new security advisory.
                default: ${{ url.repo.security.advisories }}/new
                $ref: '#/definitions/url'
          tree:
            title: Tree
            description: URL of the default branch's tree view.
            default: ${{ url.repo.home }}/tree/${{ repo.info.default_branch }}
            $ref: '#/definitions/url'
          blob:
            title: Blob
            description: URL of the default branch's blob view.
            default: ${{ url.repo.home }}/blob/${{ repo.info.default_branch }}
            $ref: '#/definitions/url'
          raw:
            title: Raw
            description: URL of the default branch's raw file view.
            default: 'https://raw.githubusercontent.com/${{ repo.info.full_name }}/${{ repo.info.default_branch }}'
            $ref: '#/definitions/url'
          readme:
            title: Community README Files
            description: URLs for community health files and README files.
            type: object
            default: { }
            properties:
              github:
                title: GitHub README
                description: |
                  URL of the GitHub repository's main `README` file
                  (cf. [`doc.github`](##cc.doc.github)).
                default: ${{ url.repo.blob }}/${{ path.file.readme.github }}
                $ref: '#/definitions/url'
              code_of_conduct:
                title: Code of Conduct
                description: |
                  URL of the repository's code of conduct,
                  i.e., the `CODE_OF_CONDUCT` file
                  (cf. [`readme.code_of_conduct`](##cc.readme.code_of_conduct)).
                default: ${{ url.repo.blob }}/${{ path.file.readme.code_of_conduct }}
                $ref: '#/definitions/url'
              code_owners:
                title: Code Owners
                description: |
                  URL of the repository's code owners,
                  i.e., the `CODEOWNERS` file
                  (cf. [`readme.code_owners`](##cc.readme.code_owners)).
                default: ${{ url.repo.blob }}/${{ path.file.readme.code_owners }}
                $ref: '#/definitions/url'
              contributing:
                title: Contributing
                description: |
                  URL of the repository's contributing guidelines,
                  i.e., the `CONTRIBUTING` file.
                  (cf. [`readme.contributing`](##cc.readme.contributing)).
                default: ${{ url.repo.blob }}/${{ path.file.readme.contributing }}
                $ref: '#/definitions/url'
              governance:
                title: Governance
                description: |
                  URL of the repository's governance model,
                  i.e., the `GOVERNANCE` file.
                  (cf. [`readme.governance`](##cc.readme.governance)).
                default: ${{ url.repo.blob }}/${{ path.file.readme.governance }}
                $ref: '#/definitions/url'
              security:
                title: Security
                description: |
                  URL of the repository's security policy,
                  i.e., the `SECURITY` file.
                  (cf. [`readme.security`](##cc.readme.security)).
                default: ${{ url.repo.blob }}/${{ path.file.readme.security }}
                $ref: '#/definitions/url'
              support:
                title: Support
                description: |
                  URL of the repository's support resources,
                  i.e., the `SUPPORT` file.
                  (cf. [`readme.support`](##cc.readme.support)).
                default: ${{ url.repo.blob }}/${{ path.file.readme.support }}
                $ref: '#/definitions/url'
          license:
            title: License
            description: |
              URL of the repository's license file.
              (cf. [`license`](##cc.license)).
            default: ${{ url.repo.blob }}/${{ path.file.license }}
            $ref: '#/definitions/url'
          file:
            title: Files
            description: URLs for specific files in the repository.
            type: object
            default: { }
            properties:
              announcement:
                title: Announcement
                description: |
                  URL of the repository's announcement banner.
                default: ${{ url.repo.raw }}/${{ path.file.web.announcement }}
                $ref: '#/definitions/url'
      web:
        title: Website
        type: object
        default: { }
        additionalProperties:
          title: URL
          description: |
            A URL of the project's website.

            For each path set in [`path.web`](##cc.path.web),
            a key-value pair is automatically added here,
            where the key is the same as in `path.web`,
            and the value is the URL of the corresponding page.
          type: string
          format: uri
          $ref: '#/definitions/url'
        properties:
          base:
            title: Base
            description: |
              Base URL (cname) of the website.

              To use the GitHub Pages default domain (i.e., when no custom domain is available),
              this should be set to `https://${{ repo.info.owner.login }}.github.io/${{ repo.info.name }}`,
              unless the repository is for a
              [user page](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)
              (i.e., named `{USERNAME}.github.io`),
              in which case the base URL should be set to `https://${{ repo.info.owner.login }}.github.io`.
            type: string
            format: uri
            default: 'https://${{ repo.info.owner.login }}.github.io/${{ repo.info.name }}'
            examples:
              - 'https://${{ repo.info.owner.login }}.github.io'
          home:
            title: Home
            description: |
              URL of the project's homepage.

              This should point to the main `index` file of the website.
            type: string
            format: uri
            default: ${{ url.web.base }}
            examples:
              - ${{ url.web.base }}/some/path
            $ref: '#/definitions/url'
      package:
        title: Package
        description: |
          URLs of the project's software package.
        type: object
        default: { }
        properties:
          pypi:
            title: PyPI
            description: |
              URLs of the project's PyPI package.
            type: object
            default: { }
            properties:
              home:
                title: Home
                description: Homepage URL of the PyPI package.
                default: https://pypi.org/project/${{ package.name }}
                $ref: '#/definitions/url'
          conda:
            title: Conda
            description: |
              URLs of the project's Conda package.
            type: object
            default: { }
            properties:
              home:
                title: Home
                description: Homepage URL of the Conda package.
                default: https://anaconda.org/conda-forge/${{ package.name }}
                $ref: '#/definitions/url'
  custom:
    title: Custom Metadata
    description: Custom metadata and configurations set by the user
    type: object

definitions:
  entity:
    title: Entity
    description: |
      A natural or legal person.
      
      If `github` is provided, the following keys that are not provided are automatically filled
      with information from the GitHub API, if available:
      - [`name`](#cc.def.entity.name)
      - [`bio`](#cc.def.entity.bio)
      - [`affiliation`](#cc.def.entity.affiliation)
      - [`avatar`](#cc.def.entity.avatar)
      - [`email`](#cc.def.entity.email)
      - [`website`](#cc.def.entity.website)
      - [`orcid`](#cc.def.entity.orcid)
      - [`researchgate`](#cc.def.entity.researchgate)
      - [`linkedin`](#cc.def.entity.linkedin)
      - [`twitter`](#cc.def.entity.twitter)
      - [`city`](#cc.def.entity.city)
    type: object
    additionalProperties: false
    required:
      oneOf:
        - [ github ]
        - [ name ]
    properties:
      github:
        title: GitHub User
        description: |
          GitHub user information of the entity.

          Only provide `username`; the rest of the keys is automatically fetched from the
          [GitHub API](https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-a-user).
        type: object
        additionalProperties: false
        required: [ username ]
        properties:
          user:
            title: GitHub Username
            description: |
              GitHub username of the entity.

              If provided, `name`, `email`, and `avatar`
              will be fetched automatically from GitHub API,
              unless they are provided explicitly.
            $ref: '#/definitions/github_username'
          id:
            title: GitHub ID
            description: |
              GitHub ID of the entity.

              When `username` is provided, this is fetched automatically from GitHub API.
            type: integer
            minimum: 1
            examples:
              - 139513484
          node_id:
            title: GitHub Node ID
            description: |
              GitHub Node ID of the entity.

              When `username` is provided, this is fetched automatically from GitHub API.
            type: string
            examples:
              - O_kgDOCFDOjA
          url:
            title: GitHub URL
            description: |
              GitHub account URL of the entity.

              When `username` is provided, this is fetched automatically from GitHub API.
            $ref: '#/definitions/url'
      name:
        title: Name
        description: |
          The entity's name.

          If the entity is a legal person, only provide `legal`.
          Otherwise, `first` and `last` must be provided at least.

          If not provided, `github` must be provided.
          In that case, user information is automatically fetched from
          [GitHub API](https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-a-user)
          to determine the name.
          
          :::{admonition} Name Determination
          :class: dropdown info
          
          1. If the user has no `name` set in their GitHub profile,
             a legal entity is created with `name.legal` set to the GitHub username.
             This emits a warning log in the workflow.
          2. The value of `type` in API response is checked;
             if it is `Organization`, a legal entity is created with
             `name.legal` set to the value of `name` in the API response.
          3. `name` is split by the first space character.
             If this results in other than two parts,
             a legal entity is created with `name.legal` set to the value of `name`.
             This emits a warning log in the workflow.
          4. If `name` has only two parts, a natural person is created with `name.first` and `name.last`
             set to the first and last parts of `name`, respectively.
          :::
        type: object
        additionalProperties: false
        required:
          oneOf:
            - [ first, last ]
            - [ legal ]
        properties:
          legal:
            title: Legal Name
            description: The entity's name, when it is not a natural person.
            type: string
            minLength: 1
          first:
            title: First Name
            description: The person's first name.
            type: string
            minLength: 1
          last:
            title: Last Name
            description: The person's last name.
            type: string
            minLength: 1
          particle:
            title: Name Particle
            description: |
              The person's name particle, e.g., a nobiliary particle or a preposition
              meaning 'of' or 'from' (for example 'von' in 'Alexander von Humboldt').
            type: string
            examples:
              - von
          suffix:
            title: Name Suffix
            description: |
              The person's name-suffix, e.g. 'Jr.' for Sammy Davis Jr. or 'III'
              for Frank Edwin Wright III.
            type: string
            examples:
              - Jr.
              - III
          full:
            title: Full Name
            description: |
              The person's full name.
              
              If not provided, it is automatically set to
              `first particle last, suffix`
              (`particle ` and `, suffix` are only added when provided)
              for natural persons, and to `legal` for legal persons.
            type: string
      affiliation:
        title: Affiliation
        description: |
          The entity's affiliation.
          
          If not provided while `github` is provided,
          it is automatically set to the value of `company` in the
          [GitHub API response](https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-a-user).
        type: string
      bio:
        title: Bio
        description: |
          A short biography of the entity.

          If not provided while `github` is provided,
          it is automatically set to the value of `bio` in the
          [GitHub API response](https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-a-user).
        type: string
      alias:
        title: Alias
        description: The entity's alias.
        type: string
      avatar:
        title: Avatar
        description: |
          The entity's avatar URL.
          
          If not provided while `github` is provided,
          it is automatically set to the value of `avatar_html` in the
          [GitHub API response](https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-a-user).
        $ref: '#/definitions/url'
      email:
        title: Email
        description: |
          The entity's contact email.
          
          If not provided while `github` is provided,
          `email.user` is automatically set to the value of `email` in the
          [GitHub API response](https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-a-user).
        $ref: '#/definitions/email'
      website:
        title: Website
        description: |
          The entity's website address.
          
          If not provided while `github` is provided,
          it is automatically set to the value of `blog` in the
          [GitHub API response](https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-a-user).
        $ref: '#/definitions/url'
      orcid:
        title: ORCID
        description: |
          The entity's [ORCID](https://orcid.org) account information.
          
          If not provided while `github` is provided,
          the GitHub user's [social accounts](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#adding-links-to-your-social-accounts)
          are fetched from the
          [GitHub API](https://docs.github.com/en/rest/users/social-accounts?apiVersion=2022-11-28#list-social-accounts-for-a-user).
          If an ORCID URL is found, `orcid` is automatically set.
        $ref: '#/definitions/orcid'
      researchgate:
        title: ResearchGate
        description: |
          The entity's ResearchGate account information.
          
          If not provided while `github` is provided,
          the GitHub user's [social accounts](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#adding-links-to-your-social-accounts)
          are fetched from the
          [GitHub API](https://docs.github.com/en/rest/users/social-accounts?apiVersion=2022-11-28#list-social-accounts-for-a-user).
          If a ResearchGate URL is found, `researchgate` is automatically set.
        $ref: '#/definitions/researchgate'
      linkedin:
        title: LinkedIn
        description: |
          The entity's LinkedIn account information.
          
          If not provided while `github` is provided,
          the GitHub user's [social accounts](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#adding-links-to-your-social-accounts)
          are fetched from the
          [GitHub API](https://docs.github.com/en/rest/users/social-accounts?apiVersion=2022-11-28#list-social-accounts-for-a-user).
          If a LinkedIn URL is found, `linkedin` is automatically set.
        $ref: '#/definitions/linkedin'
      twitter:
        title: Twitter
        description: |
          The entity's Twitter account information.
          
          If not provided while `github` is provided,
          the GitHub user's [social accounts](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#adding-links-to-your-social-accounts)
          are fetched from the
          [GitHub API](https://docs.github.com/en/rest/users/social-accounts?apiVersion=2022-11-28#list-social-accounts-for-a-user).
          If a Twitter URL is found, `twitter` is automatically set.
        $ref: '#/definitions/twitter'
      address:
        title: Address
        description: The entity's address.
        type: string
      city:
        title: City
        description: |
          The entity's city.
          
          If not provided while `github` is provided,
          it is automatically set to the value of `location` in the
          [GitHub API response](https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-a-user).
        type: string
      region:
        title: Region
        description: The entity's region.
        type: string
      country:
        title: Country
        description: |
          The entity's country, defined as an
          [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1) country code.
        type: string
        enum:
          - AD
          - AE
          - AF
          - AG
          - AI
          - AL
          - AM
          - AO
          - AQ
          - AR
          - AS
          - AT
          - AU
          - AW
          - AX
          - AZ
          - BA
          - BB
          - BD
          - BE
          - BF
          - BG
          - BH
          - BI
          - BJ
          - BL
          - BM
          - BN
          - BO
          - BQ
          - BR
          - BS
          - BT
          - BV
          - BW
          - BY
          - BZ
          - CA
          - CC
          - CD
          - CF
          - CG
          - CH
          - CI
          - CK
          - CL
          - CM
          - CN
          - CO
          - CR
          - CU
          - CV
          - CW
          - CX
          - CY
          - CZ
          - DE
          - DJ
          - DK
          - DM
          - DO
          - DZ
          - EC
          - EE
          - EG
          - EH
          - ER
          - ES
          - ET
          - FI
          - FJ
          - FK
          - FM
          - FO
          - FR
          - GA
          - GB
          - GD
          - GE
          - GF
          - GG
          - GH
          - GI
          - GL
          - GM
          - GN
          - GP
          - GQ
          - GR
          - GS
          - GT
          - GU
          - GW
          - GY
          - HK
          - HM
          - HN
          - HR
          - HT
          - HU
          - ID
          - IE
          - IL
          - IM
          - IN
          - IO
          - IQ
          - IR
          - IS
          - IT
          - JE
          - JM
          - JO
          - JP
          - KE
          - KG
          - KH
          - KI
          - KM
          - KN
          - KP
          - KR
          - KW
          - KY
          - KZ
          - LA
          - LB
          - LC
          - LI
          - LK
          - LR
          - LS
          - LT
          - LU
          - LV
          - LY
          - MA
          - MC
          - MD
          - ME
          - MF
          - MG
          - MH
          - MK
          - ML
          - MM
          - MN
          - MO
          - MP
          - MQ
          - MR
          - MS
          - MT
          - MU
          - MV
          - MW
          - MX
          - MY
          - MZ
          - NA
          - NC
          - NE
          - NF
          - NG
          - NI
          - NL
          - NO
          - NP
          - NR
          - NU
          - NZ
          - OM
          - PA
          - PE
          - PF
          - PG
          - PH
          - PK
          - PL
          - PM
          - PN
          - PR
          - PS
          - PT
          - PW
          - PY
          - QA
          - RE
          - RO
          - RS
          - RU
          - RW
          - SA
          - SB
          - SC
          - SD
          - SE
          - SG
          - SH
          - SI
          - SJ
          - SK
          - SL
          - SM
          - SN
          - SO
          - SR
          - SS
          - ST
          - SV
          - SX
          - SY
          - SZ
          - TC
          - TD
          - TF
          - TG
          - TH
          - TJ
          - TK
          - TL
          - TM
          - TN
          - TO
          - TR
          - TT
          - TV
          - TW
          - TZ
          - UA
          - UG
          - UM
          - US
          - UY
          - UZ
          - VA
          - VC
          - VE
          - VG
          - VI
          - VN
          - VU
          - WF
          - WS
          - YE
          - YT
          - ZA
          - ZM
          - ZW
      post-code:
        title: Post Code
        description: The entity's post code.
        type: string
      tel:
        title: Telephone
        description: The entity's telephone number.
        type: string
      location:
        title: Location
        description: |
          The entity's location, e.g., when the entity is a conference.

          This is only used when the entity is a legal person,
          i.e., when `name.legal` is set.
        type: string
      date_start:
        title: Start Date
        description: |
          The entity's starting date, e.g., when the entity is a conference.

          This is only used when the entity is a legal person,
          i.e., when `name.legal` is set.
        $ref: '#/definitions/date'
      date_end:
        title: End Date
        $ref: '#/definitions/date'
        description: |
          The entity's ending date, e.g., when the entity is a conference.

          This is only used when the entity is a legal person,
          i.e., when `name.legal` is set.
  reference:
    title: Reference
    description: A bibliographic reference.
    type: object
    additionalProperties: false
    required: [ authors, title, type ]
    properties:
      abbreviation:
        title: Abbreviation
        description: The abbreviation of a work.
        type: string
        minLength: 1
      abstract:
        title: Abstract
        description: The abstract of a work.
        type: string
        minLength: 1
      authors:
        title: Authors
        description: The author(s) of the work.
        type: array
        uniqueItems: true
        minItems: 1
        items:
          title: Author
          description: |
            An author of the work.
            
            This can either be set to the ID of a person defined in [`people`](##cc.people),
            or to an [`entity`](#cc.) object.
          oneOf:
            - type: string
            - $ref: '#/definitions/entity'


      collection-doi:
        $ref: '#/definitions/doi'
        description: The DOI of a collection containing the work.
      collection-title:
        description: The title of a collection or proceedings.
        minLength: 1
        type: string
      collection-type:
        description: The type of a collection.
        minLength: 1
        type: string
      commit:
        $ref: '#/definitions/commit'
      conference:
        $ref: '#/definitions/entity'
        description: The conference where the work was presented.
      contact:
        description: The contact person, group, company, etc. for a work.
        items:
          anyOf:
            - $ref: '#/definitions/person'
            - $ref: '#/definitions/entity'
        minItems: 1
        type: array
        uniqueItems: true
      copyright:
        description: The copyright information pertaining to the work.
        minLength: 1
        type: string
      data-type:
        description: The data type of a data set.
        minLength: 1
        type: string
      database:
        description: The name of the database where a work was accessed/is stored.
        minLength: 1
        type: string
      database-provider:
        $ref: '#/definitions/entity'
        description: The provider of the database where a work was accessed/is stored.
      date-accessed:
        $ref: '#/definitions/date'
        description: The date the work was accessed.
      date-downloaded:
        $ref: '#/definitions/date'
        description: The date the work has been downloaded.
      date-published:
        $ref: '#/definitions/date'
        description: The date the work has been published.
      date-released:
        $ref: '#/definitions/date'
        description: The date the work has been released.
      department:
        description: The department where a work has been produced.
        minLength: 1
        type: string
      doi:
        $ref: '#/definitions/doi'
        description: The DOI of the work.
      edition:
        description: The edition of the work.
        minLength: 1
        type: string
      editors:
        description: The editor(s) of a work.
        items:
          anyOf:
            - $ref: '#/definitions/person'
            - $ref: '#/definitions/entity'
        minItems: 1
        type: array
        uniqueItems: true
      editors-series:
        description: The editor(s) of a series in which a work has been published.
        items:
          anyOf:
            - $ref: '#/definitions/person'
            - $ref: '#/definitions/entity'
        minItems: 1
        type: array
        uniqueItems: true
      end:
        anyOf:
          - type: integer
          - minLength: 1
            type: string
        description: The end page of the work.
      entry:
        description: An entry in the collection that constitutes the work.
        minLength: 1
        type: string
      filename:
        description: The name of the electronic file containing the work.
        minLength: 1
        type: string
      format:
        description: The format in which a work is represented.
        minLength: 1
        type: string
      identifiers:
        description: The identifier(s) of the work.
        items:
          $ref: '#/definitions/identifier'
        minItems: 1
        type: array
        uniqueItems: true
      institution:
        $ref: '#/definitions/entity'
        description: The institution where a work has been produced or published.
      isbn:
        description: The ISBN of the work.
        pattern: ^[0-9\- ]{10,17}X?$
        type: string
      issn:
        description: The ISSN of the work.
        pattern: ^\d{4}-\d{3}[\dxX]$
        type: string
      issue:
        anyOf:
          - minLength: 1
            type: string
          - type: number
        description: The issue of a periodical in which a work appeared.
      issue-date:
        description: The publication date of the issue of a periodical in which a
          work appeared.
        minLength: 1
        type: string
      issue-title:
        description: The name of the issue of a periodical in which the work appeared.
        minLength: 1
        type: string
      journal:
        description: The name of the journal/magazine/newspaper/periodical where the
          work was published.
        minLength: 1
        type: string
      keywords:
        description: Keywords pertaining to the work.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        uniqueItems: true
      languages:
        description: The language identifier(s) of the work according to ISO 639 language
          strings.
        items:
          maxLength: 3
          minLength: 2
          pattern: ^[a-z]{2,3}$
          type: string
        minItems: 1
        type: array
        uniqueItems: true
      license:
        $ref: '#/definitions/license'
      license-url:
        $ref: '#/definitions/url'
        description: The URL of the license text under which the work is licensed
          (only for non-standard licenses not included in the SPDX License List).
      loc-end:
        anyOf:
          - type: integer
          - minLength: 1
            type: string
        description: The line of code in the file where the work ends.
      loc-start:
        anyOf:
          - type: integer
          - minLength: 1
            type: string
        description: The line of code in the file where the work starts.
      location:
        $ref: '#/definitions/entity'
        description: The location of the work.
      medium:
        description: The medium of the work.
        minLength: 1
        type: string
      month:
        anyOf:
          - maximum: 12
            minimum: 1
            type: integer
          - enum:
              - '1'
              - '2'
              - '3'
              - '4'
              - '5'
              - '6'
              - '7'
              - '8'
              - '9'
              - '10'
              - '11'
              - '12'
            type: string
        description: The month in which a work has been published.
      nihmsid:
        description: The NIHMSID of a work.
        minLength: 1
        type: string
      notes:
        description: Notes pertaining to the work.
        minLength: 1
        type: string
      number:
        anyOf:
          - minLength: 1
            type: string
          - type: number
        description: The accession number for a work.
      number-volumes:
        anyOf:
          - type: integer
          - minLength: 1
            type: string
        description: The number of volumes making up the collection in which the work
          has been published.
      pages:
        anyOf:
          - type: integer
          - minLength: 1
            type: string
        description: The number of pages of the work.
      patent-states:
        description: The states for which a patent is granted.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        uniqueItems: true
      pmcid:
        description: The PMCID of a work.
        pattern: ^PMC[0-9]{7}$
        type: string
      publisher:
        $ref: '#/definitions/entity'
        description: The publisher who has published the work.
      recipients:
        description: The recipient(s) of a personal communication.
        items:
          anyOf:
            - $ref: '#/definitions/entity'
            - $ref: '#/definitions/person'
        minItems: 1
        type: array
        uniqueItems: true
      repository:
        $ref: '#/definitions/url'
        description: The URL of the work in a repository (when the repository is neither
          a source code repository nor a build artifact repository).
      repository-artifact:
        $ref: '#/definitions/url'
        description: The URL of the work in a build artifact/binary repository.
      repository-code:
        $ref: '#/definitions/url'
        description: The URL of the work in a source code repository.
      scope:
        description: The scope of the reference, e.g., the section of the work it
          adheres to.
        minLength: 1
        type: string
      section:
        anyOf:
          - minLength: 1
            type: string
          - type: number
        description: The section of a work that is referenced.
      senders:
        description: The sender(s) of a personal communication.
        items:
          anyOf:
            - $ref: '#/definitions/entity'
            - $ref: '#/definitions/person'
        minItems: 1
        type: array
        uniqueItems: true
      start:
        anyOf:
          - type: integer
          - minLength: 1
            type: string
        description: The start page of the work.
      status:
        description: The publication status of the work.
        enum:
          - abstract
          - advance-online
          - in-preparation
          - in-press
          - preprint
          - submitted
        type: string
      term:
        description: The term being referenced if the work is a dictionary or encyclopedia.
        minLength: 1
        type: string
      thesis-type:
        description: The type of the thesis that is the work.
        minLength: 1
        type: string
      title:
        description: The title of the work.
        minLength: 1
        type: string
      translators:
        description: The translator(s) of a work.
        items:
          anyOf:
            - $ref: '#/definitions/entity'
            - $ref: '#/definitions/person'
        minItems: 1
        type: array
        uniqueItems: true
      type:
        description: The type of the work.
        enum:
          - art
          - article
          - audiovisual
          - bill
          - blog
          - book
          - catalogue
          - conference-paper
          - conference
          - data
          - database
          - dictionary
          - edited-work
          - encyclopedia
          - film-broadcast
          - generic
          - government-document
          - grant
          - hearing
          - historical-work
          - legal-case
          - legal-rule
          - magazine-article
          - manual
          - map
          - multimedia
          - music
          - newspaper-article
          - pamphlet
          - patent
          - personal-communication
          - proceedings
          - report
          - serial
          - slides
          - software-code
          - software-container
          - software-executable
          - software-virtual-machine
          - software
          - sound-recording
          - standard
          - statute
          - thesis
          - unpublished
          - video
          - website
        type: string
      url:
        $ref: '#/definitions/url'
        description: The URL of the work.
      version:
        $ref: '#/definitions/version'
        description: The version of the work.
      volume:
        anyOf:
          - type: integer
          - minLength: 1
            type: string
        description: The volume of the periodical in which a work appeared.
      volume-title:
        description: The title of the volume in which the work appeared.
        minLength: 1
        type: string
      year:
        anyOf:
          - type: integer
          - minLength: 1
            type: string
        description: The year in which a work has been published.
      year-original:
        anyOf:
          - type: integer
          - minLength: 1
            type: string
        description: The year of the original publication.
  identifier:
    title: Identifier
    description: An identifier for the work.
    type: object
    additionalProperties: false
    required: [ type, value ]
    properties:
      type:
        title: Type
        description: The type of the identifier.
        type: string
        enum: [ doi, url, swh, other ]
      value:
        title: Value
        description: |
          The value of the identifier.

          Depending on `type`, this must be:
          - `doi`: A Digital Object Identifier (DOI) 
             conforming to the regex pattern `^10\.\d{4,9}(\.\d+)?/[A-Za-z0-9:/_;\-\.\(\)\[\]\\]+$`.
          - `url`: A URL.
          - `swh`: A [Software Heritage identifier](https://docs.softwareheritage.org/devel/swh-model/persistent-identifiers.html),
             without further qualifiers, such as origin, visit, anchor, or path.
             It must conform to the regex pattern `^swh:1:(snp|rel|rev|dir|cnt):[0-9a-fA-F]{40}$`.
          - `other`: Any other string value.
        type: string
        examples:
          - 10.5281/zenodo.1003150
          - https://example.com
          - swh:1:cnt:94a9ed024d3859793618152ea559a168bbcbb5e2
      description:
        title: Description
        description: A description for the identifier value.
        type: string
        examples:
          - The version DOI for this version, which has a relation childOf with the concept
            DOI specified in the doi field in the root of this file.
          - The identifier provided by Archival Repository, which points to this version
            of the software.
    allOf:
      - if:
          properties:
            type:
              const: doi
        then:
          properties:
            value:
              $ref: '#/definitions/doi'
      - if:
          properties:
            type:
            const: url
        then:
          properties:
            value:
              $ref: '#/definitions/url'
      - if:
          properties:
            type:
            const: swh
        then:
          properties:
            value:
              type: string
              format: swh
              pattern: ^swh:1:(snp|rel|rev|dir|cnt):[0-9a-fA-F]{40}$
  github_username:
    title: GitHub Username
    description: A GitHub username.
    type: string
    pattern: ^[A-Za-z0-9][A-Za-z0-9\-]*$
    examples:
      - RepoDynamics
      - ${{ people.owner.github.username }}
  url:
    title: URL
    description: A URL.
    type: string
    format: uri
    pattern: ^(https|http|ftp|sftp)://.+
    examples:
      - 'https://example.com'
      - 'http://example.com'
      - 'ftp://example.com'
      - 'sftp://example.com'
      - 'https://example.com/path/to/resource'
      - 'https://example.com/path/to/resource?query=string'
      - 'https://example.com/path/to/resource#fragment'
  doi:
    title: DOI
    description: A Digital Object Identifier (DOI).
    type: string
    format: doi
    pattern: ^10\.\d{4,9}(\.\d+)?/[A-Za-z0-9:/_;\-\.\(\)\[\]\\]+$
    examples:
      - 10.5281/zenodo.1003150
  email:
    title: Email
    description: An email information.
    type: object
    additionalProperties: false
    required: [ user ]
    properties:
      user:
        title: Address
        description: The entity's email address.
        type: string
        pattern: ^[\S]+@[\S]+\.[\S]{2,}$
        format: email
        examples:
          - info@repodynamics.com
      url:
        title: Email URL
        description: |
          The entity's email URL.

          If not provided, it is automatically set to `mailto:{user}`.
        type: string
        examples:
          - 'mailto:info@repodynamics.com'
  orcid:
    title: ORCID
    description: An ORCID account information.
    type: object
    additionalProperties: false
    required: [ user ]
    properties:
      user:
        title: Username
        description: The entity's ORCID ID.
        type: string
        pattern: '[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{3}[0-9X]{1}'
        examples:
          - 0000-0002-1825-0097
      url:
        title: URL
        description: |
          The entity's ORCID URL.

          This is automatically set to `https://orcid.org/{id}`.
        type: string
        format: uri
        pattern: ^https://orcid.org/[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{3}[0-9X]{1}$
        examples:
          - 'https://orcid.org/0000-0002-1825-0097'
  date:
    title: Date
    description: A date in the format YYYY-MM-DD.
    type: string
    format: date
    pattern: ^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$
    examples:
      - '1900-01-01'
      - '2020-12-31'
  twitter:
    title: Twitter
    description: A Twitter account information.
    type: object
    additionalProperties: false
    required: [ user ]
    properties:
      user:
        title: Username
        description: The entity's Twitter ID.
        type: string
        examples:
          - RepoDynamics
      url:
        title: URL
        description: |
          The entity's Twitter URL.

          This is automatically set to `https://twitter.com/{id}`.
        type: string
        format: uri
        examples:
          - 'https://twitter.com/RepoDynamics'
  linkedin:
    title: LinkedIn
    description: A LinkedIn account information.
    type: object
    additionalProperties: false
    required: [ user ]
    properties:
      user:
        title: Username
        description: The entity's LinkedIn ID.
        type: string
        examples:
          - repodynamics
      url:
        title: URL
        description: |
          The entity's LinkedIn URL.

          This is automatically set to `https://linkedin.com/in/{id}`.
        type: string
        format: uri
        examples:
          - 'https://linkedin.com/in/repodynamics'
  researchgate:
    title: ResearchGate
    description: A ResearchGate account information.
    type: object
    additionalProperties: false
    required: [ user ]
    properties:
      user:
        title: Username
        description: The entity's ResearchGate ID.
        type: string
        examples:
          - RepoDynamics
      url:
        title: URL
        description: |
          The entity's ResearchGate URL.

          This is automatically set to `https://www.researchgate.net/profile/{id}`.
        type: string
        format: uri
        examples:
          - 'https://www.researchgate.net/profile/RepoDynamics'
  color_config:
    title: Color Configuration
    description: Configurations for the colors of a specific element in the project's user interfaces.
    type: object
    additionalProperties: false
    properties:
      light:
        title: Light Color
        description: Color of the element for light themes.
        type: string
        pattern: ^[0-9a-fA-F]{6}$
      dark:
        title: Dark Color
        description: Color of the element for dark themes.
        type: string
        pattern: ^[0-9a-fA-F]{6}$
  static_badge:
    type: object
    default: { }
    additionalProperties: false
    properties:
      style:
        type: string
        enum: [ "flat", "flat-square", "plastic", "for-the-badge", "social" ]
      label:
        type: string
      message:
        type: string
      label_color:
        type: string
      color:
        type: string
      logo:
        type: object
        additionalProperties: false
        properties:
          type:
            type: string
            enum: [ path, url, data, name ]
          value:
            type: string
          extension:
            type: string
            enum: [ apng, avif, bmp, gif, ico, jpg, jpeg, png, svg, tif, tiff, webp ]
        required: [ type, value ]
      logo_color:
        type: string
      logo_size:
        type: string
        enum: [ "auto" ]
      logo_width:
        type: string
      label_color_dark:
        type: string
      color_dark:
        type: string
      logo_color_dark:
        type: string
      link:
        type: string
      alt:
        type: string
      title:
        type: string
      width:
        type: string
      height:
        type: string
      align:
        type: string
        enum: [ left, center, right ]
    required: [ message ]
  index_repo:
    type: object
    additionalProperties: false
    required: [ theme, config ]
    properties:
      type:
        type: string
        enum: [ pypackit-default, custom, manual ]
      config:
        title: Theme Configurations
    allOf:
      - if:
          properties:
            type:
              const: pypackit-default
        then:
          properties:
            config:
              $ref: '#/definitions/theme-pypackit-default'
      - if:
          properties:
            type:
              const: custom
        then:
          properties:
            config:
              description: Configurations for the custom theme.
              type: object
              default: { }
      - if:
          properties:
            type:
              const: manual
        then:
          properties:
            config:
              description: Content of the README file.
              type: string
              default: ""
  theme-pypackit-default-footer:
    description: Footer configurations for PyPackIT's default theme.
    type: object
    default: { }
    additionalProperties: false
    properties:
      common:
        type: object
        default: { }
        additionalProperties: false
        properties:
          style:
            type: string
            enum: [ "flat", "flat-square", "plastic", "for-the-badge", "social" ]
            default: for-the-badge
          height:
            type: string
            default: ""
          label_color:
            type: string
            default: ""
          label_color_dark:
            type: string
            default: ""
      project:
        default:
          style: for-the-badge
          label: "${{ name }}"
          message: "©${{ copyright.notice }}"
          color: "${{ theme.color.primary.light }}"
          color_dark: "${{ theme.color.primary.dark }}"
          logo: "${{ path.dir.control }}/ui/branding/favicon.svg"
          link: "${{ url.website.home }}"
          title: "${{ badge.project.text_left }} ${{ badge.project.text_right }}"
          alt: "${{ badge.project.title }}"
        $ref: '#/definitions/static_badge'
      license:
        default:
          style: for-the-badge
          label: License
          message: "${{ license.shortname }}"
          color: "${{ theme.color.secondary.light }}"
          color_dark: "${{ theme.color.secondary.dark }}"
          link: "${{ url.website.home }}/${{ web.path.license }}"
          alt: "${{ license.fullname }}"
          title: "${{ name }} is licensed under the ${{ license.fullname }}"
        $ref: '#/definitions/static_badge'
      show_pypackit_badge:
        type: boolean
        default: true
    required: [ badge_style, badge_height, project_badge, license_badge, show_pypackit_badge ]
  theme-pypackit-default:
    description: Configurations for the theme.
    additionalProperties: false
    properties:
      header:
        type: object
        default: { }
        additionalProperties: false
        properties:
          style:
            type: string
            enum: [ horizontal, vertical ]
            default: vertical
          logo:
            type: object
            default: { }
            additionalProperties: false
            properties:
              alt_text:
                type: string
                default: "${{ name }}: ${{ tagline }}"
              title:
                type: string
                default: "Welcome to ${{ name }}! Click to visit our website and learn more."
              width:
                type: string
                default: "80%"
              height:
                type: string
                default: "300px"
          menu_top:
            type: object
            default: { }
            additionalProperties: false
            properties:
              height:
                title: Height
                description: Height of the buttons in the top menu.
                type: string
                default: 35px
              num_spaces:
                type: integer
                default: 2
          menu_bottom:
            type: object
            default: { }
            additionalProperties: false
            properties:
              num_spaces:
                type: integer
                default: 2
              buttons:
                type: array
                default: [ ]
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    path:
                      type: string
                  required: [ title, path ]
            required: [ num_spaces, buttons ]
      body:
        type: object
        default: { }
        additionalProperties: false
        properties:
          sections:
            type: array
            default:
              - type: keynotes
            items:
              type: object
              additionalProperties: false
              properties:
                type:
                  type: string
                  enum: [ keynotes ]
                config:
                  type: object
                  default: { }
              allOf:
                - if:
                    properties:
                      type:
                        const: keynotes
                  then:
                    properties:
                      config:
                        $ref: '#/definitions/theme-pypackit-default_body-section-keynotes_config'
              required: [ type, config ]
      footer:
        $ref: '#/definitions/theme-pypackit-default-footer'
  theme-pypackit-default_body-section-keynotes_config:
    additionalProperties: false
    properties:
      title:
        type: string
        default: Key Features
  health_file:
    title: Health File
    description: |
      Configurations for a GitHub
      [community health files](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file).

    type: object
    additionalProperties: false
    properties:
      type:
        type: string
        enum: [ custom, manual ]
        default: manual
      config:
        title: Configurations
      path:
        type: string
        enum: [ ., .github, docs ]
        default: .
      extension:
        type: string
        enum: [ md, rst ]
        default: md
      include_footer:
        type: boolean
        default: true
    required: [ type, config, path, include_footer ]
    allOf:
      - if:
          properties:
            type:
              const: custom
        then:
          properties:
            config:
              description: Configurations for the custom theme.
              type: object
              default: { }
      - if:
          properties:
            type:
              const: manual
        then:
          properties:
            config:
              description: Content of the directory README file.
              type: string
              default: ""
  web_section:
    title: Section
    description: A (sub)section of the website.
    type: object
    additionalProperties: false
    properties:
      title:
        title: Section Title
        description: Title of the section.
        type: string
        examples:
          - Introduction
          - User Manual
          - Installation
      path:
        title: Section Path
        description: Relative path to the section.
        type: string
        examples:
          - intro
          - intro/index
          - user-manual
          - user-manual/installation/index
  health_filepath:
    title: Health File Path
    description: |
      Path to a GitHub
      [community health file](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file).

      These can either be placed in the `.github` directory, the `docs` direcotry,
      or the root of the repository, i.e., `.`.
    type: string
    enum: [ ., .github, docs ]
