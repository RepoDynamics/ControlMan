$schema: https://json-schema.org/draft/2020-12/schema
title: ""
default:
  theme:
    color:
      primary:
        light: 0F3460
        dark: 3A98B9
      secondary:
        light: 562B08
        dark: E3651D
    footer:
      type: pypackit
      config:
        common:
          style: flat-square
          label_color: ""
          color: ""
          label_color_dark: ""
          color_dark: ""
          height: ""
        project:
          style: for-the-badge
          label: "${{ name }}"
          message: "Â©${{ copyright.notice }}"
          color: "${{ theme.color.primary.light }}"
          color_dark: "${{ theme.color.primary.dark }}"
          logo: "${{ path.dir.control }}/ui/branding/favicon.svg"
          link: "${{ url.website.home }}"
          title: "${{ badge.project.text_left }} ${{ badge.project.text_right }}"
          alt: "${{ badge.project.title }}"
        license:
          style: for-the-badge
          label: License
          message: "${{ license.shortname }}"
          color: "${{ theme.color.secondary.light }}"
          color_dark: "${{ theme.color.secondary.dark }}"
          link: "${{ url.website.home }}/${{ web.path.license }}"
          alt: "${{ license.fullname }}"
          title: "${{ name }} is licensed under the ${{ license.fullname }}"
  readme:
    github: &readme-config
      type: pypackit-default
      config:
        header:
          menu_bottom:
            buttons:
              - title: Overview
                description: ""
                path: 'intro/overview'
              - title: Install
                description: ""
                path: 'manual/install'
              - title: Releases
                description: ""
                path: 'news/category/releases'
              - title: Contact
                description: ""
                path: 'help/contact'
    conda: *readme-config
    pypi:
      path: ${{ path.dir.source }}/README_PYPI.md
    dir:
      .github:
        type: manual
        config: |
          # GitHub Directory

          ## Workflows
          The `.github/workflows` directory contains GitHub Actions
          [workflow definition files](https://docs.github.com/en/actions/using-workflows/about-workflows).
      .github/DISCUSSION_TEMPLATE:
        type: manual
        config: |
          # GitHub Discussion Category Forms

          > [!IMPORTANT]
          > Do not manually modify the contents of this directory.
            All files in this directory are automatically maintained; do not modify them manually.
            They can be managed through the [`user/discussion.yaml`](${{ path.dir.control }}/user/discussion.yaml)
            configuration file of the repository's [control center](${{ path.dir.control }}).

          This directory contains templates for GitHub discussion category forms,
          which are used to customize the templates

          It encourages community members to include specific, structured information
          in their discussions by using customizable web form fields.

          To be recognized by GitHub, discussion category forms must be stored in the directory `/.github/DISCUSSION_TEMPLATE/`
          (i.e. this directory). 

          Each YAML file defines a form for a specific discussion category, indicated by the
          filename, which must correspond with the slug for one of the discussion categories.
          For example, the template for the "New Announcements" category should be stored in `.github/DISCUSSION_TEMPLATE/new-announcements.yml`.

      .github/ISSUE_TEMPLATE:
        type: manual
        config: |
          # GitHub Issues Settings
          This directory contains templates and configurations used when an issue is opened in the repository.

          ## Templates
          The issues templates use the GitHub's [issue forms](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms)
          to create customizable web form fields. Each `.yml` file (other than `config.yml`) provides a template for
          a specific issue type. The issue forms use the YAML format, with a series of defined [top-level keys](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms#top-level-syntax)
          such as `name`, `description` and `labels`, and a [body syntax](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema)
          to define the form fields.

          Any YAML file created in this directory using the specified syntax will be automatically added to the list of possible
          issue forms that users can select from when opening a new issue in the repository.


          ## Configurations
          The [config.yml](../../.meta/config/issues_template_chooser.yaml) file contains the configurations for the
          [template chooser](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#configuring-the-template-chooser),
          i.e. the landing page of the repository's 'Issues' section.

          ### Options
          - `blank_issues_enabled`: A boolean value defining whether free-form issues can be opened by users.
          - `contact_links`: An array of dictionaries, defining additional external links for opening issues.
          These options will be displayed alongside the available templates in the 'Issues' section of the repository.

          ## References
          - [GitHub Documentation](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates)
      .github/PULL_REQUEST_TEMPLATE:
        type: manual
        config: |
          # GitHub Pull Requests Templates
          This directory contains additional templates for pull requests.

          By default, the template defined at [./github/pull_request_template.md](./github/pull_request_template.md)
          is used when opening a pull request. To use the extra templates in this directory,
          the `template` [query parameter](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/using-query-parameters-to-create-a-pull-request)
          must be added to the URL of the pull request form, defining the name of the template to use.
          For example, to use a template file named `my_custom_template.md`, add the following query string at the end of the
          URL: `?template=my_custom_template.md`. A full URL may e.g. look like this:
          https://github.com/my-username/my-repo/compare/main...my-branch?template=my_custom_template.md

          ## Notes
          - Pull request template filenames are not case-sensitive, and can have an extension such as `.md` or `.txt`.
          - The YAML syntax used for issue forms is not supported for pull requests templates.

          ## References
          - [GitHub Documentation](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository)
      '.github/workflows': |
        # GitHub Actions Workflows
        This directory contains [workflows](https://docs.github.com/en/actions/using-workflows/about-workflows)
        used in the CI/CD operations of the repository.

        ## [docs_rtd_pr_preview](_docs_rtd-pr-preview.yaml)
        https://docs.readthedocs.io/en/latest/pull-requests.html
        https://docs.readthedocs.io/en/latest/guides/pull-requests.html

        ## Releases
        GitHub has [built-in functionality](https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes)
        to automatically generate release notes.


        ## Syntax

        ## References
        - [GitHub Actions Documentation](https://docs.github.com/en/actions)
        - [Workflow Syntax](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions)

        ## Useful Links
        - [Workflow security: `pull_request` vs `pull_request_target`](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)
      "${{ path.dir.control }}":
        type: manual
        config: |
          # Control Center

          ## Media


          ### Social Media Preview

          However, this is now less relevant after GitHub introduced its own [framework for automatically
          generating Open Graph images](https://github.blog/2021-06-22-framework-building-open-graph-images/)
          for repositories on the fly.

      "${{ path.dir.website }}":
        type: manual
        config: |
          # Documentation Website


  web:
    sphinx:
      dependency:
        import_name: sphinx
        pip:
          spec: sphinx == 7.3.7
        conda:
          spec: sphinx = 7.3.7
          channel: conda-forge
        url:
          docs: https://www.sphinx-doc.org/
          source: https://github.com/sphinx-doc/sphinx
      config:
        needs_sphinx: '7.3'
        numfig: true
        numfig_format:
          code-block: 'Code %s'
          figure: 'Fig. %s'
          section: 'Section %s'
          table: 'Table %s'
        numfig_secnum_depth: 3
        pygments_style: default
        show_authors: true
        trim_footnote_reference_space: true
        math_eqref_format: Eq. {number}
        math_number_all: true
        math_numfig: true
        math_numsep: .
        nitpicky: true
        maximum_signature_line_length: 80
        exclude_patterns:
          - "**Thumbs.db"
          - "**.DS_Store"
          - "**.ipynb_checkpoints"
          - "**README.md"
        root_doc: index
        templates_path:
          - _templates  # Ref: https://www.sphinx-doc.org/en/master/development/templating.html
        show_warning_types: true
        html_title: ${{ name }}
        html_short_title: ${{ name }}
        html_baseurl: ${{ url.web.base }}
        html_favicon: ${{ theme.logo.icon }}
        html_static_path:
          - _static
          - /${{ dir.path.media }}
        html_secnumber_suffix: ".â"
        html_extra_path: [ 404.html ]
        html_use_opensearch: ${{ url.web.base }}
        html_show_sphinx: false
        html_math_renderer: mathjax
        html_context:
          pp_title_sep: ${{ web.sphinx.html_secnumber_suffix }}
        html_last_updated_fmt: '%b %d, %Y'
        latex_engine: lualatex
        latex_elements:
          papersize: a4paper
          pointsize": 11pt
          figure_align: htbp
          fontpkg: |
            \setmainfont{DejaVu Serif}
            \setsansfont{DejaVu Sans}
            \setmonofont{DejaVu Sans Mono}
          preamble: |
            \usepackage[titles]{tocloft}
            \usepackage{fontspec}
            \cftsetpnumwidth {1.25cm}\cftsetrmarg{1.5cm}
            \setlength{\cftchapnumwidth}{0.75cm}
            \setlength{\cftsecindent}{\cftchapnumwidth}
            \setlength{\cftsecnumwidth}{1.25cm}
          fncychap: "\usepackage[Bjornstrup]{fncychap}"
          printindex: "\footnotesize\raggedright\printindex"
        latex_theme: manual
        python_display_short_literal_types: true
        python_maximum_signature_line_length: 80
    extensions:
      - name: myst_parser
        usage: Adding MyST Markdown functionalities to Sphinx.
        url_docs: https://myst-parser.readthedocs.io/
        url_source: https://github.com/executablebooks/MyST-Parser
        pip_spec: myst-parser == 3.0.1
        conda_spec: myst-parser = 3.0.1
        conda_channel: conda-forge
        config:
          # https://myst-parser.readthedocs.io/en/latest/configuration.html
          myst_enable_extensions:
            # Ref: https://myst-parser.readthedocs.io/en/latest/syntax/optional.html
            - amsmath
            - attrs_inline
            - attrs_block
            - colon_fence
            - deflist
            - dollarmath
            - fieldlist
            - html_admonition
            - html_image
            - linkify
            - replacements
            - smartquotes
            - substitution
            - tasklist
          myst_links_external_new_tab: true
          myst_heading_anchors: 6
          myst_sub_delimiters:
            - "|"
            - "|"
      - name: sphinx_design
        usage: Adding responsive web components, such as grids, cards, tabs, etc.
        url_docs: https://sphinx-design.readthedocs.io/
        url_source: https://github.com/executablebooks/sphinx-design
        pip_spec: sphinx-design == 0.6.0
        conda_spec: sphinx-design = 0.6.0
        conda_channel: conda-forge
        config:
          sd_fontawesome_latex: true
      - name: ablog
        usage: Adding a news blog to the website.
        url_docs: https://ablog.readthedocs.io/
        url_source: https://github.com/sunpy/ablog
        pip_spec: ablog == 0.11.10
        conda_spec: ablog = 0.11.10
        conda_channel: conda-forge
        config:
          # https://ablog.readthedocs.io/en/stable/manual/ablog-configuration-options.html
          blog_path: ${{ web.path.news }}
          blog_title: ${{ name }} News
          blog_baseurl: ${{ url.web.base }}
          blog_default_author: ${{ team.owner.name.full }}
          post_auto_image: 1
          post_always_section: true
          blog_post_pattern:
            - ${{ web.extensions.ablog.blog_path }}/post/*.rst
            - ${{ web.extensions.ablog.blog_path }}/post/*.md
          blog_feed_archives: true
          fontawesome_included: true
      - name: sphinx_copybutton
        usage: Adding a copy button to code blocks.
        url_docs: https://sphinx-copybutton.readthedocs.io/
        url_source: https://github.com/executablebooks/sphinx-copybutton
        pip_spec: sphinx-copybutton == 0.5.2
        conda_spec: sphinx-copybutton = 0.5.2
        conda_channel: conda-forge
      - dependency:
          import_name: sphinx_last_updated_by_git
          pip:
            spec: sphinx-last-updated-by-git == 0.3.7
          description: Adding page-specific last-updated dates to each page.
          url:
            docs: https://sphinx-last-updated-by-git.readthedocs.io/
            source: https://github.com/mgeier/sphinx-last-updated-by-git
      - name: sphinxext.opengraph
        usage: Generating OpenGraph metadata for each page.
        url_docs: https://sphinxext-opengraph.readthedocs.io/
        url_source: https://github.com/wpilibsuite/sphinxext-opengraph/
        pip_spec: sphinxext-opengraph == 0.9.1
        conda_spec: sphinxext-opengraph = 0.9.1
        conda_channel: conda-forge
        config:
          ogp_site_url: ${{ url.web.base }}
          ogp_social_cards:
            image: ${{ path.dir.website }}/img/ogp.png  #TODO
            line_color: ${{ theme.color.primary.light }}
      - name: sphinxcontrib.bibtex
        usage: Adding BibTeX-style citations.
        url_docs: https://sphinxcontrib-bibtex.readthedocs.io/
        url_source: https://github.com/mcmtroffaes/sphinxcontrib-bibtex
        pip_spec: sphinxcontrib-bibtex == 2.6.2
        conda_spec: sphinxcontrib-bibtex = 2.6.2
        conda_channel: conda-forge
        config:
          bibtex_bibfiles: [refs.bib]
          bibtex_default_style: plain
          bibtex_reference_style: label
      - name: sphinx_togglebutton
        usage: Adding toggle buttons to admonitions and other content.
        url_docs: https://sphinx-togglebutton.readthedocs.io/
        url_source: https://github.com/executablebooks/sphinx-togglebutton
        pip_spec: sphinx-togglebutton == 0.3.2
        conda_spec: sphinx-togglebutton = 0.3.2
        conda_channel: conda-forge
      - name: sphinxcontrib.mermaid
        usage: Adding Mermaid diagrams and charts.
        url_docs: https://sphinxcontrib-mermaid-demo.readthedocs.io/en/stable/
        url_source: https://github.com/mgaitan/sphinxcontrib-mermaid
        pip_spec: sphinxcontrib-mermaid == 0.9.2
        conda_spec: sphinxcontrib-mermaid = 0.9.2
        conda_channel: conda-forge
      - name: sphinxcontrib.rsvgconverter
        usage: Converting SVG images to PNG for LaTeX.
        notes: |
          This doesn't work on `latex_logo`.
          
          References:
          - https://github.com/missinglinkelectronics/sphinxcontrib-svg2pdfconverter
          - https://nbsphinx.readthedocs.io/en/latest/markdown-cells.html
      - name: sphinx.ext.autosummary
        url_docs: https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html
        config:
          autosummary_generate: true
          autosummary_generate_overwrite: true
          autosummary_imported_members: false
          autosummary_ignore_module_all: false
      - name: sphinx.ext.autodoc
      - name: sphinx.ext.mathjax
      - name: sphinx.ext.viewcode
      - name: sphinx.ext.intersphinx
        usage: Adding links to external documentation.
        url_docs: https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html
        config:
          intersphinx_mapping:
            python: [ https://docs.python.org/3/, null ]
            numpy: [ https://numpy.org/doc/stable/, null ]
            matplotlib: [ https://matplotlib.org/stable/, null ]
      - name: sphinx.ext.extlinks
      - name: sphinx.ext.duration
      - name: sphinx.ext.doctest
    theme:
      dependency:
        import_name: pydata_sphinx_theme
        pip:
          spec: pydata-sphinx-theme == 0.15.4
        conda:
          spec: pydata-sphinx-theme == 0.15.4
          channel: conda-forge
        url:
          docs: https://pydata-sphinx-theme.readthedocs.io/
          source: https://github.com/pydata/pydata-sphinx-theme
      config:
        # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/layout.html#references
        html_theme_options:
          navbar_start: [ navbar-logo ]  # header left
          navbar_center: [ navbar-nav ]  # header center
          navbar_end: [ navbar-icon-links, theme-switcher ]  # header right
          navbar_persistent: [ search-button ]  # header right persistent
          navbar_align: left  # alignment of `navbar_center`: {"left", "right", "content"}
          article_header_start: [ breadcrumbs ]  # article header left
          article_header_end: []  # article header right
          primary_sidebar_end: []  # left sidebar bottom
          secondary_sidebar_items:
            - "page-toc"
            - "last-updated"
            - "edit-this-page"
            - "indices"
          article_footer_items: [ ]
          show_prev_next: True
          content_footer_items: [ ]
          footer_start: [ "version", "copyright", "pypackit_ver" ],  # footer left
          footer_end: [ "quicklinks" ]  # footer right
          show_nav_level: 2
          navigation_depth: 5
          show_toc_level: 3
          header_links_before_dropdown: 7
          icon_links: meta["web"]["navbar_icons"]
          icon_links_label: "External links"
          use_edit_page_button: True
          announcement: ${{ repo.url.raw }}/${{ announcement.path }}
          search_bar_text: Search ${{ name }}
          logo:
            image_light: _static/logo_simple_light.svg
            image_dark: _static/logo_simple_dark.svg
            alt_text: ${{ name }}
          pygment_light_style: default  # https://pygments.org/styles/
          pygment_dark_style: monokai   # https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/styling.html#configure-pygments-theme
          sidebarwidth: 270
          sidebar_includehidden: True
        html_context:
          github_user: ${{ repo.info.owner.login }}
          github_repo: ${{ repo.info.name }}
          github_version: ${{ repo.info.default_branch }}
          doc_path: ${{ dir.path.website }}/source
          default_mode: auto  # Default theme mode: {'light', 'dark', 'auto'}
    announcement:
      path: ${{ path.dir.website }}/announcement.html
    path:
      license: about/license
      contact: help/contact
      blog: news
    dependencies:
      - name: librsvg
        description: |
          Library for rendering SVG files and using them 
          in PDF (via LaTeX) builds done by latexmk.
        conda:
          spec: librsvg
          channel: conda-forge
        url:
          docs: https://wiki.gnome.org/Projects/LibRsvg
          source: https://gitlab.gnome.org/GNOME/librsvg
type: object
additionalProperties: false
required: [ url ]
properties:
  announcement:
    title: Configurations of project announcements.
    type: object
    properties:
      path:
        title: Path to the announcement banner file.
        type: string
        default: ${{ path.dir.website }}/announcement.html
        examples:
          - docs/announcement.html
      retention_days:
        title: Number of days to keep an announcement.
        default: 30
        $ref: 'defs#/definitions/non_negative_integer'
  health:
    title: |
      Configurations for 
      [community health files](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file).
    type: object
    additionalProperties: false
    properties:
      contributing:
        title: Contributing guidelines of the project.
        description: |
          This corresponds to the [`CONTRIBUTING`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage,
          as well as when users create an issue or open a pull request.

          This file is used to communicate how people can contribute to the project,
          and may include information on how to report bugs, suggest enhancements,
          and submit code changes, as well as references to documentation, contact information,
          and other resources. We recommend to keep this file short,
          and only include links to resources on the project's website,
          as to avoid duplication of content.
        allOf:
          - $ref: '#/definitions/doc_file'
          - properties:
              path:
                title: |
                  Path to the
                  [`CONTRIBUTING`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)
                  file.
                description: |
                  This file must be named `CONTRIBUTING` (case-insensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository. It can have the extensions `.txt`, `.md`, or `.rst`.
                type: string
                pattern: (?i)^(?:|.github/|docs/)CONTRIBUTING(?:.(txt|md|rst))?$
                default: CONTRIBUTING.md
                examples:
                  - CONTRIBUTING
                  - CONTRIBUTING.md
                  - contributing.rst
                  - docs/CONTRIBUTING.txt
                  - .github/contributing.md
      governance:
        title: Governance model of the project.
        description: |
          This corresponds to the `GOVERNANCE`
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage.

          This file is used to communicate how decisions are made in the project,
          and may include information on how the project is managed, how decisions are made,
          and how conflicts are resolved.
          We recommend to keep this file short,
          and only include links to resources on the project's website,
          as to avoid duplication of content.
        allOf:
          - $ref: '#/definitions/doc_file'
          - properties:
              path:
                title: Path to the `GOVERNANCE` file.
                description: |
                  This file must be named `GOVERNANCE` (case-sensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository. 
                  It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                type: string
                pattern: ^(?:|.github/|docs/)GOVERNANCE(?i:.(txt|md|rst))?$
                default: GOVERNANCE.md
                examples:
                  - GOVERNANCE
                  - GOVERNANCE.md
                  - docs/GOVERNANCE.txt
                  - .github/GOVERNANCE.md
      security:
        title: Security policy of the project.
        description: |
          This corresponds to the
          [`SECURITY`](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository)
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage,
          as well as when users want to create a new issue or security advisory. 

          This file is used to communicate how security vulnerabilities are handled in the project,
          and may include information on how to report security vulnerabilities,
          how they are triaged, and how they are resolved.
          We recommend to keep this file short,
          and only include links to resources on the project's website,
          as to avoid duplication of content.
        allOf:
          - $ref: '#/definitions/doc_file'
          - properties:
              path:
                title: |
                  Path to the
                  [`SECURITY`](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository)
                  file.
                description: |
                  This file must be named `SECURITY` (case-sensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository. 
                  It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                type: string
                pattern: ^(?:|.github/|docs/)SECURITY(?i:.(txt|md|rst))?$
                default: SECURITY.md
                examples:
                  - SECURITY
                  - SECURITY.md
                  - docs/SECURITY.txt
                  - .github/SECURITY.md
      support:
        title: Support resources of the project.
        description: |
          This corresponds to the [`SUPPORT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-support-resources-to-your-project)
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage,
          as well as when users are creating a new issue.

          This file is used to communicate how users can get support for the project,
          and may include information on how to ask questions, report issues, and request features.
          We recommend to keep this file short,
          and only include links to resources on the project's website,
          as to avoid duplication of content.
        allOf:
          - $ref: '#/definitions/doc_file'
          - properties:
              path:
                title: Support Policy
                description: |
                  Path to the
                  [`SUPPORT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-support-resources-to-your-project)
                  file (cf. [`doc.support`](#cc.doc.support)).

                  This file must be named `SUPPORT` (case-sensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository. 
                  It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                type: string
                pattern: ^(?:|.github/|docs/)SUPPORT(?i:.(txt|md|rst))?$
                default: SUPPORT.md
                examples:
                  - SUPPORT
                  - SUPPORT.md
                  - docs/SUPPORT.txt
                  - .github/SUPPORT.md
      code_of_conduct:
        title: Code of conduct of the project.
        description: |
          This corresponds to the
          [`CODE_OF_CONDUCT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)
          file in the repository, which is automatically recognized by GitHub,
          and displayed on the repository's homepage,
          as well as when users are creating a new issue or opening a pull request.
          However, for "Code of conduct" to be marked as complete in the repository's community profile,
          GitHub only accepts the
          [Contributor Covenant](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html)
          and the [Citizen Code of Conduct](http://stumptownsyndicate.org/).

          This file is used to communicate the standards of behavior expected from contributors,
          and may include information on how to report violations, how they are triaged,
          and how they are resolved.
        allOf:
          - $ref: '#/definitions/doc_file'
          - properties:
              path:
                title: |
                  Path to the
                  [`CODE_OF_CONDUCT`](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)
                  file.
                description: |
                  This file must be named `CODE_OF_CONDUCT` (case-sensitive)
                  and placed either in the `.github` directory, the `docs` directory,
                  or the root of the repository.
                  It can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                type: string
                pattern: ^(?:|.github/|docs/)CODE_OF_CONDUCT(?i:.(txt|md|rst))?$
                default: CODE_OF_CONDUCT.md
                examples:
                  - CODE_OF_CONDUCT
                  - CODE_OF_CONDUCT.md
                  - docs/CODE_OF_CONDUCT.txt
                  - .github/CODE_OF_CONDUCT.MD
          - if:
              properties:
                config:
                  type: object
                  properties:
                    id:
                      const: covenant
            then:
              properties:
                config:
                  title: |
                    Configurations for the Contributor Covenant Code of Conduct.
                  type: object
                  default: { }
                  additionalProperties: false
                  properties:
                    contact:
                      title: |
                        Contact information of the maintainer for the code of conduct.
                      type: object
                      default: { }
                      additionalProperties: false
                      properties:
                        display:
                          title: Display text of the link.
                          type: string
                          default: "${{ maintainer.email.code_of_conduct }}"
                        url:
                          title: URL of the link.
                          description: |
                            For email addresses, use `mailto:`.
                          type: string
                          default: "${{ maintainer.email.code_of_conduct }}"
      code_owners:
        title: Code owners of the project.
        description: |
        type: object
        default: { }
        additionalProperties: false
        required: [ path ]
        properties:
          path:
            title: |
              Path to the
              [`CODEOWNERS`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)
              file.

              This file must be named `CODEOWNERS` (case-sensitive, without extension)
              and placed either in the `.github` directory, the `docs` directory,
              or the root of the repository.
            type: string
            pattern: ^(?:|.github/|docs/)CODEOWNERS$
            default: .github/CODEOWNERS
            examples:
              - CODEOWNERS
              - .github/CODEOWNERS
              - docs/CODEOWNERS
  readme:
    title: README file configurations.
    description: |
      These include README files that are displayed to users on landing pages of
      project's repositories, such as GitHub, PyPI, and Anaconda, as well as
      README files in different directories of the repository providing
      technical information to contributors and reviewers.

      :::{admonition} Supported Syntax
      :class: dropdown info

      [GitHub](https://docs.github.com/en/get-started/writing-on-github),
      PyPI, and Anaconda.org all support markup languages such as Markdown and reStructuredText
      for defining the contents of files.
      That is, when the file extension is in a supported format (e.g., `.md`, `.rst`),
      the contents are rendered as HTML on the respective platforms.
      However, GitHub only allows [GitHub Flavored Markdown](https://github.github.com/gfm/) syntax,
      and performs additional post-processing and sanitization after rendering the contents to HTML,
      due to security concerns. This means that only a 
      [limited subset of HTML features](https://docs.github.com/en/get-started/writing-on-github)
      are supported.
      Like GitHub, PyPI and Anaconda also impose several restrictions
      and perform additional post-processing and sanitization.
      PyPI uses the [Readme Renderer](https://github.com/pypa/readme_renderer) library
      to render the README file, which only supports a
      [limited subset of HTML tags](https://github.com/pypa/readme_renderer/blob/9c2eb81301bc230f2795cf7e6dc2c23f5815ea41/readme_renderer/clean.py#L20-L31)
      and [attributes](https://github.com/pypa/readme_renderer/blob/9c2eb81301bc230f2795cf7e6dc2c23f5815ea41/readme_renderer/clean.py#L33-L65).
      Since these do not completely overlap with the features supported by GitHub,
      a separate [PyPI-friendly README](https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/)
      must be provided for PyPI, to ensure that the contents are correctly rendered on the package index.
      :::
    type: object
    additionalProperties: false
    properties:
      github:
        title: |
          Main [`README`](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)
          file of the GitHub repository.
        allOf:
          - $ref: '#/definitions/doc_file'
          - $ref: '#/definitions/readme_config_selector'
          - properties:
              path:
                title: Filepath
                description: |
                  Path to the README file.

                  It must be named `README` (case-sensitive) and placed either in the
                  `.github` directory, the `docs` directory, or the root of the repository,
                  and can have the extensions `.txt`, `.md`, or `.rst` (case-insensitive).
                  If more than one of such files are present, the order of precedence is
                  `.github`, then root, and finally the `docs` directory.
                type: string
                pattern: ^(?:|.github/|docs/)README(?i:.(txt|md|rst))?$
                default: README.md
                examples:
                  - README
                  - README.md
                  - .github/README.txt
                  - docs/README.rst
      pypi:
        title: README file of the PyPI/TestPyPI package.
        description: |
          `readme` metadata of your package
          (formerly known as `long_description`)
        allOf:
          - $ref: '#/definitions/doc_file'
          - $ref: '#/definitions/readme_config_selector'
          - properties:
              path:
                title: Path to the PyPI README file.
                type: string
                examples:
                  - ${{ path.dir.source }}/README_PYPI.md
                  - README_PYPI.md
      conda:
        title: README file of the Conda package.
        allOf:
          - $ref: '#/definitions/doc_file'
          - $ref: '#/definitions/readme_config_selector'
          - properties:
              path:
                title: Path to the Conda README file.
                type: string
                examples:
                  - ${{ path.dir.source }}/README_CONDA.md
                  - README_CONDA.md
      dir:
        title: Directory READMEs
        description: |
          Configurations for README files in different directories of the repository.
          For each readme file, add a key-value pair where the key is the path to the directory.
        type: object
        additionalProperties:
          title: Configuration for a directory README file.
          $ref: '#/definitions/doc_file'
  theme:
    title: Configurations defining the visual theme of the project.
    type: object
    additionalProperties: false
    required: [ color ]
    properties:
      logo:
        type: object
        properties:
          icon:
            type: string
          simple:
            type: object
            properties:
              light:
                type: string
              dark:
                type: string
          full:
            type: object
            properties:
              light:
                type: string
              dark:
                type: string
      color:
        title: Colors of the project's theme.
        description: |
          All colors must be in hexadecimal format (without the leading `#` character).
        type: object
        required: [ primary, secondary ]
        properties:
          primary:
            title: Primary colors of the project.
            $ref: '#/definitions/color_config'
          secondary:
            title: Secondary colors of the project.
            $ref: '#/definitions/color_config'
      footer:
        title: Configurations of project's footer.
        description: |
          The footer is automatically added to the project's [README](#cc.readme) and
          [community health files](#cc.health).
        allOf:
          - $ref: '#/definitions/doc_file'
          - if:
              properties:
                config:
                  type: object
                  properties:
                    id:
                      const: pypackit
            then:
              properties:
                config:
                  $ref: '#/definitions/footer_config_pypackit'
  web:
    title: Configurations for the project's website.
    examples:
      - theme:
          color:
            primary:
              light: '135400'
              dark: 'C2726D'
            secondary:
              light: '055005'
              dark: 'C7A43C'
        analytics:
          plausible:
            domain: ""
            url: ""
          google_id: "G-0X66W6TGL2"
        announcement_retention_days: 30
        navbar_icons:
          - name: PyPI Distribution
            icon: fa-brands fa-python
            url: ${{ url.pypi }}
          - name: Conda Distribution
            icon: fa-custom fa-conda #_static/img/icon/conda.svg
            url: ${{ url.conda }}
            #            type: local
            attributes:
              class: nav-link fa-conda
          - name: Source Repository
            icon: fa-brands fa-github
            url: ${{ url.github.home }}
          - name: Issues
            icon: fa-regular fa-circle-dot
            url: ${{ url.github.issues.home }}
          - name: Pull Requests
            icon: fa-solid fa-code-pull-request
            url: ${{ url.github.pulls.home }}
          - name: Discussions
            icon: fa-solid fa-comments
            url: ${{ url.github.discussions.home }}
          - name: Email
            icon: fa-regular fa-envelope
            url: mailto:${{ maintainer.email.main }}
          - name: License
            icon: fa-solid fa-copyright
            url: ${{ url.website.license }}
        path:
          contact: 'help/contact'
          news: 'news'
          contributors: 'about/#contributors'
          contributing: 'contribute'
          bug_report: 'contribute/feedback/report'
          license: 'license'
          security_measures: 'contribute/collaborate/maintain/security'
          sponsor: 'contribute/collaborate/maintain/sponsor'
        quicklinks: subsections
        readthedocs:
          name: ${{ package.name }}
          build:
            os: ubuntu-22.04
            tools:
              python: "mambaforge-4.10"
            jobs:
              post_checkout:
                # versioningit needs the full git history to determine the package's version at build time.
                # see: https://github.com/readthedocs/readthedocs.org/issues/5989#issuecomment-853039401
                - git fetch --unshallow
          conda:
            environment: ${{ path.dir.website }}/requirements.yaml
          python:
            install:
              - method: pip
                path: .
          sphinx:
            configuration: ${{ path.dir.website }}/source/conf.py
            builder: dirhtml
            fail_on_warning: false
          formats: all
    type: object
    additionalProperties: false
    required: [ sphinx ]
    properties:
      sphinx:
        title: Configurations for the Sphinx website generator.
        description: |
          These are the [same key-value pairs](https://www.sphinx-doc.org/en/master/usage/configuration.html)
          that can be added to the `conf.py` file of a Sphinx project.
          They are automatically added to `conf.py` file during the website build process.
          Note that not all keys are explicitly listed in the schema,
          but any valid key can still be added here. However, there are some exceptions:
          - [`version`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-version)
            and [`release`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-release)
            are automatically determined from git tags during the build process,
            and should not be set here.
          - [`extensions`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-extensions)
            are automatically added based on the definitions in [`extension`](#cc.web.extension),
            and should not be set here.

        type: object
        additionalProperties: false
        required: [ dependency ]
        properties:
          dependency:
            $ref: 'defs#/definitions/dependency'
          config:
            type: object
            additionalProperties: true
            properties:
              project:
                title: Name of the project.
                type: string
                default: ${{ name }}
              author:
                title: Author(s) of the project.
                type: string
                default: ${{ team.owner.name.full }}
              project_copyright:
                title: Copyright notice of the project.
                type: string
                default: ${{ copyright.notice }}
              version:
                title: Public (`major.minor`) version of the project.
                description: |
                  When not set, this is determined at build time from the latest
                  [version tag](#cc.tag.version) in the branch.
                type: string
                default_auto: determined from git tags
              release:
                title: Full version of the project.
                description: |
                  When not set, this is determined at build time from the latest
                  [version tag](#cc.tag.version) in the branch.
                type: string
                default_auto: determined from git tags
              needs_sphinx:
                title: Minimum supported version of Sphinx.
                description: |
                  The version must be in the form of `major.minor`,
                  where `major` and `minor` are integers.
                  This is automatically determined from the [`dependency`](#cc.web.sphinx.dependency) definition.
                type: string
                default_auto: determined from dependency definition
              today_fmt:
                title: Format of the current date.
                type: string
                default: '%b %d, %Y'
              numfig:
                title: Numbering of figures.
                type: boolean
                default: false
              numfig_format:
                title: |
                  Format of the figure numbering
                  ([ref](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-numfig_format)).
                type: object
                properties:
                  code-block:
                    title: Format of code block numbering.
                    type: string
                    default: 'Listing %s'
                  figure:
                    title: Format of figure numbering.
                    type: string
                    default: 'Fig. %s'
                  section:
                    title: Format of section numbering.
                    type: string
                    default: 'Section %s'
                  table:
                    title: Format of table numbering.
                    type: string
                    default: 'Table %s'
              html_static_path:
                title: Paths to static files.
                description: |
                  Paths that do not start with a `/` are relative to the website's `source` directory.
                type: array
                items:
                  type: string
              html_css_files:
                title: Paths to CSS files.
                description: |
                  Any `.css` or `.css_t` file in a directory named `css`
                  directly under the first defined path in `html_static_path`
                  will be automatically added to this list, if not already defined here.
                type: array
                items:
                  type: string
              html_js_files:
                title: Paths to JavaScript files.
                description: |
                  Any `.js` or `.js_t` file in a directory named `js`
                  directly under the first defined path in `html_static_path`
                  will be automatically added to this list, if not already defined here.
                type: array
                items:
                  type: string
              latex_engine:
                title: LaTeX engine to use.
                description: |
                  * https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-latex-output
                  * https://www.sphinx-doc.org/en/master/latex.html
                type: string
                enum: [ pdflatex, xelatex, lualatex, platex, uplatex ]
                default: 'pdflatex'
              latex_show_pagerefs:
                title: Show page references in LaTeX output.
                type: boolean
                default: true
              latex_show_urls:
                title: Show URLs in LaTeX output.
                type: string
                enum: [ no, inline, footnotes ]
                default: 'footnote'
              latex_theme:
                title: LaTeX theme to use.
                type: string
                enum: [ manual, howto ]
                default: manual
      theme:
        title: Theme of the website.
        type: object
        additionalProperties: false
        required: [ dependency ]
        properties:
          dependency:
            title: Name of the theme.
            $ref: 'defs#/definitions/dependency'
            default: 'pydata_sphinx_theme'
          config:
            title: Configuration options for the theme.
            type: object
            additionalProperties: true
      extensions:
        title: Extensions to be added to the Sphinx configuration.
        description: |
          All information about extensions, including dependencies and configurations, are added here.
          These are used to add the [`extensions`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-extensions)
          key and each extension's configurations to the `conf.py` file.
          They are also used to create the `requirements.txt` and `env.yaml`
          files for the website build environment.
        type: array
        items:
          type: object
          properties:
            name:
              title: Module name of the extension.
              type: string
            dependency:
              title: Dependency to be installed.
              $ref: 'defs#/definitions/dependency'
            config:
              title: Configuration to be added to the Sphinx configuration.
              type: object
              additionalProperties: true
      page:
        title: Paths to important pages on the website.
        description:
          All paths must be relative to the root of the website directory, without suffix.
        type: object
        default: { }
        required: [ blog ]
        additionalProperties:
          title: Relative path to the page.
          type: string
          examples:
            - about/license
            - help/contact
        properties:
          blog:
            title: Path to the website's blog directory.
            type: string
            default: news
          sections:
            title: Paths to main sections of the website.
            description: |
              This is automatically generated from the `toctree` of the website's main `index` file.
            type: array
            uniqueItems: true
            items:
              title: A main section of the website.
              $ref: "#/definitions/web_section"
          subsections:
            title: Paths to subsections of the website, i.e., level-2 sections.
            description: |
              This is automatically generated from the `toctree` of the website's main `index` file,
              and the `tocree`s of files listed there.
            type: array
            uniqueItems: true
            items:
              title: Subsections of a specific section of the website.
              type: object
              additionalProperties: false
              properties:
                section_title:
                  title: Title of the main section.
                  type: string
                  examples:
                    - User Manual
                    - Installation
                subsections:
                  title: Paths to subsections of the main section.
                  type: array
                  uniqueItems: true
                  items:
                    title: A subsection of the main section.
                    $ref: "#/definitions/web_section"
      url:
        title: Website
        type: object
        default: { }
        additionalProperties:
          title: A URL of the project's website.
          description: |
            For each path set in [`path.web`](#cc.path.web),
            a key-value pair is automatically added here,
            where the key is the same as in `path.web`,
            and the value is the URL of the corresponding page.
          type: string
          format: uri
          $ref: url
        properties:
          base:
            title: Custom Base URL (cname) of the website.
            description: |
              To use the GitHub Pages default domain (i.e., when no custom domain is available),
              this should be set to `https://${{ repo.info.owner.login }}.github.io/${{ repo.info.name }}`,
              unless the repository is for a
              [user page](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)
              (i.e., named `{USERNAME}.github.io`),
              in which case the base URL should be set to `https://${{ repo.info.owner.login }}.github.io`.
            type: string
            format: uri
            default: 'https://${{ team.owner.github.user }}.github.io/${{ repo.name }}'
            examples:
              - 'https://${{ repo.info.owner.login }}.github.io'
          home:
            title: URL of the project's homepage.
            description: |
              This should point to the main `index` file of the website.
            type: string
            format: uri
            default: ${{ url.web.base }}
            examples:
              - ${{ url.web.base }}/some/path
            $ref: '#/definitions/url'
definitions:
  color_config:
    title: Color Configuration
    description: Configurations for the colors of a specific element in the project's user interfaces.
    type: object
    additionalProperties: false
    properties:
      light:
        title: Light Color
        description: Color of the element for light themes.
        type: string
        pattern: ^[0-9a-fA-F]{6}$
      dark:
        title: Dark Color
        description: Color of the element for dark themes.
        type: string
        pattern: ^[0-9a-fA-F]{6}$
  static_badge:
    type: object
    default: { }
    additionalProperties: false
    properties:
      style:
        type: string
        enum: [ "flat", "flat-square", "plastic", "for-the-badge", "social" ]
      label:
        type: string
      message:
        type: string
      label_color:
        type: string
      color:
        type: string
      logo:
        type: object
        additionalProperties: false
        properties:
          type:
            type: string
            enum: [ path, url, data, name ]
          value:
            type: string
          extension:
            type: string
            enum: [ apng, avif, bmp, gif, ico, jpg, jpeg, png, svg, tif, tiff, webp ]
        required: [ type, value ]
      logo_color:
        type: string
      logo_size:
        type: string
        enum: [ "auto" ]
      logo_width:
        type: string
      label_color_dark:
        type: string
      color_dark:
        type: string
      logo_color_dark:
        type: string
      link:
        type: string
      alt:
        type: string
      title:
        type: string
      width:
        type: string
      height:
        type: string
      align:
        type: string
        enum: [ left, center, right ]
    required: [ message ]
  footer_config_pypackit:
    description: Footer configurations for PyPackIT's default theme.
    type: object
    default: { }
    additionalProperties: false
    properties:
      common:
        type: object
        default: { }
        additionalProperties: false
        properties:
          style:
            type: string
            enum: [ "flat", "flat-square", "plastic", "for-the-badge", "social" ]
            default: for-the-badge
          height:
            type: string
            default: ""
          label_color:
            type: string
            default: ""
          label_color_dark:
            type: string
            default: ""
      project:
        default:
          style: for-the-badge
          label: "${{ name }}"
          message: "Â©${{ copyright.notice }}"
          color: "${{ theme.color.primary.light }}"
          color_dark: "${{ theme.color.primary.dark }}"
          logo: "${{ path.dir.control }}/ui/branding/favicon.svg"
          link: "${{ url.website.home }}"
          title: "${{ badge.project.text_left }} ${{ badge.project.text_right }}"
          alt: "${{ badge.project.title }}"
        $ref: '#/definitions/static_badge'
      license:
        default:
          style: for-the-badge
          label: License
          message: "${{ license.shortname }}"
          color: "${{ theme.color.secondary.light }}"
          color_dark: "${{ theme.color.secondary.dark }}"
          link: "${{ url.website.home }}/${{ web.path.license }}"
          alt: "${{ license.fullname }}"
          title: "${{ name }} is licensed under the ${{ license.fullname }}"
        $ref: '#/definitions/static_badge'
      show_pypackit_badge:
        type: boolean
        default: true
    required: [ badge_style, badge_height, project_badge, license_badge, show_pypackit_badge ]
  readme_config_pypackit:
    description: Configurations for the theme.
    additionalProperties: false
    properties:
      header:
        type: object
        default: { }
        additionalProperties: false
        properties:
          style:
            type: string
            enum: [ horizontal, vertical ]
            default: vertical
          logo:
            type: object
            default: { }
            additionalProperties: false
            properties:
              alt_text:
                type: string
                default: "${{ name }}: ${{ tagline }}"
              title:
                type: string
                default: "Welcome to ${{ name }}! Click to visit our website and learn more."
              width:
                type: string
                default: "80%"
              height:
                type: string
                default: "300px"
          menu_top:
            type: object
            default: { }
            additionalProperties: false
            properties:
              height:
                title: Height
                description: Height of the buttons in the top menu.
                type: string
                default: 35px
              num_spaces:
                type: integer
                default: 2
          menu_bottom:
            type: object
            default: { }
            additionalProperties: false
            properties:
              num_spaces:
                type: integer
                default: 2
              buttons:
                type: array
                default: [ ]
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    path:
                      type: string
                  required: [ title, path ]
            required: [ num_spaces, buttons ]
      body:
        type: object
        default: { }
        additionalProperties: false
        properties:
          sections:
            type: array
            default:
              - type: keynotes
            items:
              type: object
              additionalProperties: false
              properties:
                type:
                  type: string
                  enum: [ keynotes ]
                config:
                  type: object
                  default: { }
              allOf:
                - if:
                    properties:
                      type:
                        const: keynotes
                  then:
                    properties:
                      config:
                        $ref: '#/definitions/theme-pypackit-default_body-section-keynotes_config'
              required: [ type, config ]
      footer:
        $ref: '#/definitions/theme-pypackit-default-footer'
  theme-pypackit-default_body-section-keynotes_config:
    additionalProperties: false
    properties:
      title:
        type: string
        default: Key Features
  doc_file:
    title: Documentation File
    description: |
      Configurations for a documentation file.

      These include README files (cf. [`readme`](#cc.readme))
      and GitHub community health files (cf. [`health`](#cc.health)).
    type: object
    additionalProperties: false
    required: [ config, path, include_footer ]
    properties:
      config:
        title: Configurations
        oneOf:
          - type: string
          - type: object
            required: [ id ]
            properties:
              id:
                title: ID
                type: string
      include_footer:
        type: boolean
        default: true
  web_section:
    title: Section
    description: A (sub)section of the website.
    type: object
    additionalProperties: false
    properties:
      title:
        title: Section Title
        description: Title of the section.
        type: string
        examples:
          - Introduction
          - User Manual
          - Installation
      path:
        title: Section Path
        description: Relative path to the section.
        type: string
        examples:
          - intro
          - intro/index
          - user-manual
          - user-manual/installation/index
  readme_config_selector:
    allOf:
      - if:
          properties:
            config:
              type: object
              properties:
                id:
                  const: pypackit
        then:
          properties:
            config:
              $ref: '#/definitions/readme_config_pypackit'
  pydata_sphinx_theme_config:
    type: object
    additionalProperties: false
    properties:
      html_theme_options:
        type: object
        properties:
          analytics:
            title: |
              [Configurations](https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/analytics.html)
              of web analytics services.
            type: object
            additionalProperties: false
            properties:
              google_analytics_id:
                title: Google Analytics ID
                type: string
              plausible_analytics_domain:
                title: Domain for Plausible Analytics
                type: string
              plausible_analytics_url:
                title: URL for Plausible Analytics
                $ref: 'defs#/definitions/url'
            anyOf:
              - required: [ google_analytics_id ]
              - required: [ plausible_analytics_domain, plausible_analytics_url ]
          navbar_icons:
            title: Icons to be shown in the navigation bar of the website.
            type: array
            default: [ ]
            uniqueItems: true
            items:
              type: object
              additionalProperties: false
              examples:
                - name: Twitter
                  icon: fa-brands fa-twitter
                  url: ${{ owner.url.twitter }}
                - name: LinkedIn
                  icon: fa-brands fa-linkedin
                  url: ${{ owner.url.linkedin }}
                - name: ResearchGate
                  icon: fa-brands fa-researchgate
                  url: ${{ owner.url.researchgate }}
                - name: ORCiD
                  icon: fa-brands fa-orcid
                  url: ${{ owner.url.orcid }}
              properties:
                id:
                  title: ID of the icon.
                  type: string
                name:
                  type: string
                icon:
                  type: string
                url:
                  type: string
                  $ref: url
                type:
                  type: string
                  enum:
                    - fontawesome
                    - url
                    - local
                attributes:
                  type: object
          quicklinks:
            title: Quicklinks for the navbar.
            type: array
            uniqueItems: true
            default: ${{ path.web.subsections }}
            items:
              type: object
              additionalProperties: false
              required: [ title, entries ]
              properties:
                section_title:
                  type: string
                subsections:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: object
                    additionalProperties: false
                    required: [ title, path ]
                    properties:
                      title:
                        type: string
                      path:
                        type: string