$schema: https://json-schema.org/draft/2020-12/schema
title: Workflow
default:
  control:
    cache:
      retention_hours:
        extension: 0
        repo: 1
        user: 24
        orcid: 240
        doi: 1000
        python: 500
  schedule:
    update:
      cron: '43 6 * * 6'  # Every Saturday at 6:43 UTC.
      branch:
        main: pull
        release: pull
        pre: pull
    test:
      cron: '43 23 * * *'  # Every day at 23:43 UTC.
      branch:
        main: pull
        release: pull
        pre: pull
  tool:
    pre-commit:
      env:
        dependency:
          pre_commit:
            import_name: pre_commit
            url:
              docs: https://pre-commit.com/
            pip:
              spec: pre-commit == 3.3.3
        file:
          conda: &conda_dev_env
            name: ${{ repo.name }}-dev
            path: .github/dev_environment.yaml
      config:
        file:
          type: yaml
          path: .github/.pre-commit-config.yaml
          content:
            default_language_version:
              python: python3
            minimum_pre_commit_version: 3.3.3
            repos:
              - repo: https://github.com/pre-commit/pre-commit-hooks
                rev: v4.4.0
                hooks:
                  - id: check-ast
                    # https://github.com/pre-commit/pre-commit-hooks#check-ast
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-case-conflict
                    # https://github.com/pre-commit/pre-commit-hooks#check-case-conflict
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-executables-have-shebangs
                    # https://github.com/pre-commit/pre-commit-hooks#check-executables-have-shebangs
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-json
                    # https://github.com/pre-commit/pre-commit-hooks#check-json
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-shebang-scripts-are-executable
                    # https://github.com/pre-commit/pre-commit-hooks#check-shebang-scripts-are-executable
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-symlinks
                    # https://github.com/pre-commit/pre-commit-hooks#check-symlinks
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-toml
                    # https://github.com/pre-commit/pre-commit-hooks#check-toml
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-xml
                    # https://github.com/pre-commit/pre-commit-hooks#check-xml
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: check-yaml
                    # https://github.com/pre-commit/pre-commit-hooks#check-yaml
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: end-of-file-fixer
                    # https://github.com/pre-commit/pre-commit-hooks#end-of-file-fixer
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: mixed-line-ending
                    # https://github.com/pre-commit/pre-commit-hooks#mixed-line-ending
                    stages: [ pre-commit, manual ]
                    verbose: true
                  - id: no-commit-to-branch
                    # https://github.com/pre-commit/pre-commit-hooks#no-commit-to-branch
                    stages: [ pre-commit ]
                    args: [ --branch, main, --pattern, release/.* ]
                    verbose: true
                  - id: trailing-whitespace
                    # https://github.com/pre-commit/pre-commit-hooks#trailing-whitespace
                    stages: [ pre-commit, manual ]
                    verbose: true
              - repo: https://github.com/astral-sh/ruff-pre-commit
                # Ruff version.
                rev: v0.1.5
                hooks:
                  - id: ruff
                    stages: [ pre-commit, manual ]
                    args: [ --fix, --exit-non-zero-on-fix, --config, pyproject.toml ]
                    types_or: [ python, pyi, jupyter ]
                    verbose: true
    codecov:
      config:
        file:
          type: yaml
          path: .github/.codecov.yml
          content:
            coverage:
              precision: 2
              round: nearest
              range: "90...100"
              status:
                project:
                  default:
                    target: 100%
                    threshold: 5%
            comment:
              layout: "header, diff, flags, files"
              require_changes: false
              behavior: default
    readthedocs:
      config:
        workflow:
          name: ${{ repo.name }}
          platform: "community"
        file:
          type: yaml
          path: .readthedocs.yaml
          content:
            version: 2
            build:  # Set the version of Python and other tools you might need
              os: ubuntu-22.04
              tools:
                python: "mambaforge-4.10"
              jobs:
                post_checkout:
                  # versioningit needs the full git history to determine the package's version at build time.
                  # see: https://github.com/readthedocs/readthedocs.org/issues/5989#issuecomment-853039401
                  - git fetch --unshallow
            conda:  # Website dependencies
              environment: ${{ web.env.file.conda.path }}
            python:
              install:  # Install the package
                - method: pip
                  path: ${{ dir.pkg.root }}
            sphinx:  # Build with Sphinx
              configuration: ${{ dir.web.root }}/${{ dir.web.source }}/conf.py
              builder: dirhtml
              fail_on_warning: false
            formats: all  # Build all additional formats of the documentation, i.e. pdf, epub, and htmlzip
    pylint:
      env:
        dependency:
          pylint:
            import_name: pylint
            pip:
              spec: pylint[spelling] >= 3.0, < 4
        file:
          conda: *conda_dev_env
          pip:
            path: .github/workflow_requirements/pylint.txt
    mypy:
      env:
        dependency:
          mypy:
            import_name: mypy
            pip:
              spec: mypy[reports] >= 1.8, < 2
        file:
          conda: *conda_dev_env
          pip:
            path: .github/workflow_requirements/mypy.txt
    bandit:
      env:
        dependency:
          bandit:
            import_name: bandit
            pip:
              spec: bandit[toml]
          sarif:
            import_name: bandit_sarif_formatter
            pip:
              spec: bandit-sarif-formatter
        file:
          conda: *conda_dev_env
          pip:
            path: .github/workflow_requirements/bandit.txt
type: object
additionalProperties: false
required: [ control ]
properties:
  control:
    title: Configurations for the project's control center.
    type: object
    additionalProperties: false
    required: [ cache ]
    default: { }
    properties:
      cache:
        title: Settings for cached data.
        description: |
          These include configuration extensions downloaded from external URLs
          and data obtained through web-APIs.

          :::{admonition} Not Extensible
          :class: attention

          These configurations are not extensible, 
          as they are used to define extensions and their caching settings. 
          :::

          :::{admonition} Local Override
          :class: tip dropdown

          When working with a local clone of the repository on your computer,
          you can override these configurations 
          by creating a `.local_cc_config.yaml` file with the same syntax
          in the root of the repository.
          This file is automatically added to the `.gitignore` file
          and thus will not be tracked by Git 
          or pushed to the remote repository.
          This allows you to maintain a local caching configuration 
          without affecting the remote repository.
          :::
        type: object
        additionalProperties: false
        default: { }
        required: [ retention_hours ]
        properties:
          retention_hours:
            title: Number of hours to keep different cached data.
            description: |
              After the specified duration,
              the cached data is considered stale
              and will be automatically synced with the source.
            type: object
            additionalProperties: false
            default: { }
            required: [ extension, repo, user, orcid, doi, python ]
            properties:
              extension:
                title: Configuration extensions retrieved from external URLs.
                description: |
                  These are extended data in control center configuration files
                  defined with the `!ext` tag.
                default: 0
                $ref: non_negative_number
              repo:
                title: Repository data retrieved from GitHub API.
                description: |
                  This includes general repository settings,
                  as well as details about discussion categories,
                  which are used for the website's blog.
                default: 1
                $ref: non_negative_number
              user:
                title: Team member data retrieved from GitHub API.
                description: |
                  This includes GitHub user data such as
                  name, email, avatar, bio, and other profile information.
                default: 24
                $ref: non_negative_number
              orcid:
                title: Publications data retrieved from ORCID API.
                description: |
                  This includes a list of all publication DOIs associated with an ORCID ID.
                default: 240
                $ref: non_negative_number
              doi:
                title: Publication data retrieved from DOI API.
                description: |
                  This corresponds to citation details associated with a specific DOI.
                default: 1000
                $ref: non_negative_number
              python:
                title: Python version data retrieved from the Python GitHub repository.
                description: |
                  This is a list of currently available Python versions,
                  used to update workflow configurations such as CI/CD/CT pipelines.
                default: 500
                $ref: non_negative_number
  schedule:
    title: Configurations for scheduled workflow jobs.
    description: |
      These are the Continuous pipelines
      triggered by GitHub Actions'
      [`schedule`](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule)
      event.
    type: object
    additionalProperties: false
    properties:
      update:
        title: Updating jobs.
        description: |
          Configurations for scheduled jobs that may result in updates to repository files and settings.
          These include Continuous Configuration Automation (CCA) to synchronize project configurations,
          as well as various Continuous Maintenance (CM) and Refactoring (CR) tasks.
        $ref: '#/definitions/scheduled_job'
      test:
        title: Testing jobs.
        description: |
          Configurations for the Continuous Testing (CT) pipeline of the package.
        $ref: '#/definitions/scheduled_job'
  tool:
    title: Configurations for tools used in the development workflow.
    description: |
      These include pre-integrated tools as well as any additional tools
      that you can add to the project's workflow.
    type: object
    additionalProperties:
      title: Additional tools
      description: |
        Configurations for additional tools that can be added to the project's workflow.
      $ref: '#/definitions/tool_config'
    properties:
      pre-commit:
        title: Pre-commit hooks.
        description: |
          [Pre-commit](https://pre-commit.com/) is a framework for managing and maintaining
          multi-language hooks.
          These configurations define the pre-commit hooks to be used in the project.
        $ref: '#/definitions/tool_config'
      codecov:
        title: Codecov test coverage reporting.
        description: |
          [Codecov](https://about.codecov.io/) is an online platform
          that provides code coverage metrics for your project.
          After [signing up on Codecov](https://docs.codecov.com/docs/quick-start),
          these configurations will automatically control the generation of coverage reports
          and the submission of these reports to Codecov.
        type: object
        additionalProperties: false
        properties:
          config:
            title: Configurations for CodeCov.
            type: object
            additionalProperties: false
            properties:
              file:
                title: Configuration file.
                description: |
                  This will be used by CodeCov to generate coverage reports.
                  Learn more about the [Codecov YAML configuration file](https://docs.codecov.com/docs/codecov-yaml),
                type: object
                additionalProperties: false
                properties:
                  type:
                    title: Type of the configuration file.
                    description: |
                      CodeCov only supports YAML configuration files.
                    const: yaml
                    default: yaml
                  path:
                    title: Path to the configuration file.
                    description: |
                      CodeCov only looks for a `codecov.yml` or `.codecov.yml` file
                      either in the root of the repository, or in `.github/` and `dev/` directories.
                      (cf. [CodeCov documentation](https://docs.codecov.com/docs/codecov-yaml#can-i-name-the-file-codecovyml)).
                    type: string
                    pattern: ^(.github/|dev/)?.?codecov.yml$
                    default: .github/.codecov.yml
                  content:
                    title: Configurations for CodeCov.
                    description: |
                      For a full reference, see the
                      [Codecov YAML reference](https://docs.codecov.com/docs/codecovyml-reference).
                    $ref: 'https://json.schemastore.org/codecov.json'
      readthedocs:
        title: ReadTheDocs website hosting.
        description: |
          In addition to GitHub Pages, you can also host your project's documentation on ReadTheDocs.
          This includes some manual steps to set up the website on ReadTheDocs,
          but the rest of the process, including build configurations and preview links,
          can be controlled through these configurations.
        type: object
        additionalProperties: false
        properties:
          config:
            title: Configurations for the project's website on ReadTheDocs.
            properties:
              file:
                title: Configuration file.
                description: |
                  This will be used by ReadTheDocs to build the website on readthedocs.io.
                properties:
                  type:
                    title: Type of the configuration file.
                    description: |
                      ReadTheDocs only supports YAML configuration files.
                    const: yaml
                    default: yaml
                  path:
                    title: Path to the configuration file.
                    description: |
                      By default, [ReadtheDocs](https://docs.readthedocs.io/en/stable/config-file/index.html#where-to-put-your-configuration-file)
                      only looks for a `.readthedocs.yaml` file in the root of the repository.
                      However, you can [change this manually](https://docs.readthedocs.io/en/stable/guides/setup/monorepo.html#how-to-use-a-readthedocs-yaml-file-in-a-sub-folder)
                      by setting another path on the ReadTheDocs website,
                      and then specifying that path here.
                    type: string
                    default: .readthedocs.yaml
                    examples:
                      - .github/.readthedocs.yaml
                  content:
                    title: Config
                    description: |
                      Configuration settings for the ReadTheDocs website.
                      See also: https://docs.readthedocs.io/en/stable/config-file/v2.html
                    type: object
              workflow:
                title: Workflow configurations for the ReadTheDocs website.
                description: |
                  These are used to create website preview links for pull requests.
                type: object
                additionalProperties: false
                required: [ name, platform, version_scheme, language ]
                properties:
                  name:
                    title: Name of the project on ReadTheDocs.
                    description: |
                      This is the slug name of the project.
                    type: string
                    default: ${{ repo.name }}
                  platform:
                    title: ReadTheDocs hosting platform type.
                    type: string
                    enum: [ community, business ]
                    default: community
                  version_scheme:
                    title: Versioning scheme of the website.
                    description: |
                      See [ReadTheDocs documentation](https://docs.readthedocs.io/en/stable/versioning-schemes.html)
                      for more information.
                    type: object
                    default: { }
                    additionalProperties: false
                    properties:
                      single_version:
                        title: Whether the website has a single version (vs. multiple versions).
                        type: boolean
                        default: false
                      translation:
                        title: Whether the website supports multiple languages.
                        type: boolean
                        default: false
                  language:
                    title: Language of the website.
                    type: string
                    default: en
definitions:
  scheduled_job:
    title: Configurations for a scheduled job.
    type: object
    additionalProperties: false
    required: [ cron, branch ]
    properties:
      cron:
        title: Crontab job
        description: |
          The [POSIX cron expression](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07)
          of the task's scheduled time.
          This must match one of the `cron` entries of the project's main workflow,
          as defined in the `.github/workflows/main.yaml` file under the
          [`on.schedule`](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onschedule) key.
        type: string
      branch:
        title: Behavior for each branch.
        description: |
          For each branch, you can choose to either
          - `disable` the job,
          - only `report` the results,
          - report the results, apply changes (if any) in a new branch, and submit a `pull` request,
          - report the results, and directly `commit` the changes (if any) to the target branch.
        type: object
        default: { }
        additionalProperties: false
        required: [ main, release, pre ]
        properties:
          main:
            title: Main branch
            type: string
            enum: [ disable, report, pull, commit ]
            default: pull
          release:
            title: Release branches
            type: string
            enum: [ disable, report, pull, commit ]
            default: pull
          pre:
            title: Pre-release branches
            type: string
            enum: [ disable, report, pull, commit ]
            default: pull
  tool_config:
    title: Configurations for a tool used in the development workflow.
    type: object
    additionalProperties: false
    minProperties: 1
    properties:
      env:
        title: Environment file configurations.
        description: |
          Here you can define the dependencies for the tool,
          and the environment files to write the dependencies to.
        type: object
        additionalProperties: false
        required: [ dependency, file ]
        properties:
          dependency:
            title: Tool dependencies.
            description: |
              For each dependency, add a key-value pair with the key being
              an ID for the dependency (so you can easily reference it elsewhere)
              and the value being a `dependency` object defining the dependency.
            type: object
            minProperties: 1
            additionalProperties:
              title: A dependency.
              $ref: dependency
          file:
            title: Environment files to write the dependencies.
            description: |
              The environment files to write the dependencies to.
              Specifying a conda environment file is required,
              but a pip environment file is optional.
              Multiple tools can share the same environment file(s).
            $ref: env_file_config
      config:
        tile: Configurations for the tool.
        description: |
          Here you can define the tool configurations
          to be written to a configuration file
          or be used directly in the workflow.
        type: object
        additionalProperties: false
        properties:
          file:
            title: The configuration file for the tool.
            description: |
              Here you can define configurations to be written to a specific file.
            type: object
            additionalProperties: false
            required: [ type, path, content ]
            properties:
              type:
                title: Type of the configuration file.
                description: |
                  If `txt` is selected, the content will be written to the given file as is.
                  For other types, the content will be written in the specified format.
                type: string
                enum: [ yaml, json, toml, txt ]
              path:
                title: Path to the configuration file to write.
                type: string
                examples:
                  - .github/.pre-commit-config.yaml
              content:
                title: Configurations for the tool.
                description: |
                  The content will be written to the given filepath in the format specified by `type`.
                type: [ string, array, object ]
          workflow:
            title: Workflow configurations for the tool.
            description: |
              These are not meant to be written to any file,
              but to be used directly in the workflow.
            type: object
            additionalProperties: true
